import re

def for_to_recursion(source_code):
    # Regex for for-loop
    for_loop_pattern = r'for\s+(\w+)\s*=\s*(\d+)\s+to\s+(\w+)\s*do\s*(.*?)\s*done\s;\s*(\w+)'
    # for_loop_pattern = r'for\s+(\w+)\s*=\s*(\d+)\s+to\s+(\w+)\s*do\s*(.*?)\s*done'

    # replace with recursion
    def replace_for_with_recursion(match):
        loop_var = match.group(1)  # The loop variable
        start_value = match.group(2)  # The start value 
        end_value = match.group(3)  # The end value
        loop_body = match.group(4).strip()  # loop body
        return_value = match.group(5)
        # return_value = ()

        # generate recursive function
        recursive_function = (
            f"let rec loop ({loop_var}: int) =\n"
            f"  if {loop_var} > {end_value} then {return_value}\n"  # Base case
            f"  else begin\n"
            f"    {loop_body}\n"  # Loop body
            f"    loop ({loop_var} + 1)\n"  # Recursive call with increment
            f"  end\n"
            f"in\n"
            f"loop {start_value}"
        )
        return recursive_function

    # Perform the replacement using regex
    transformed_code = re.sub(for_loop_pattern, replace_for_with_recursion, source_code, flags=re.DOTALL)
    
    return transformed_code

# # no return
# test1 = """
# let foo () =
#   for i = 0 to 10 do
#     print_int i;
#   done
# """

# result1 = for_to_recursion(test1)
# print(result1)

# with return
# test2 = """
# let foo () =
#   let ref x = 0;
#   for i = 0 to 10 do
#     x += 1;
#   done;
#   x
# """
# result2 = for_to_recursion(test2)
# print(result2)


# test list 
test3 = """
  let containsOne_for (l : list int) : bool = 
      requires { length l > 0 }
      (* ensures { result = True <-> exists i. 0 <= i < length l /\ nth i l = 1 } *)
      ensures { result <-> mem 1 l }
      let n = length l -1 in
      let ref result = False in 
      for i = 0 to n do
          invariant { result <-> exists j. 0 <= j < i /\ nth j l = 1 }
          if nth_1 i l = 1
          then result <- True
      done ;
      result
"""

result3 = for_to_recursion(test3)
print(result3)

