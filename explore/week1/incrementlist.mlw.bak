module Incrementlist
    use int.Int
    use list.List
    use list.Length
    use list.NthNoOpt
    use list.Append

    let rec nth_1 (n : int) (l : list int) : int =
        requires { length l > 0 }
        requires { 0 <= n /\ n < length l }
        variant { n }
        ensures { nth n l = result }
        match l with 
        | Cons x r -> if n = 0 then x else nth_1 (n - 1) r
        end 

    let list_increment_for (l : list int) : list int =
      requires { length l > 0 }
      ensures { forall i. 0 <= i < length l -> (nth i l) + 1 = (nth i result) }
      let n = length l in
      let ref res = Nil in
      let ref tmp = Cons ((nth_1 0 l) + 1) Nil in
      for i = 0 to n-1 do 
          invariant { length res = i }
          invariant { tmp = Cons ((nth i l) + 1) Nil }
          invariant { forall j. 0 <= j < i -> (nth j l) + 1 = (nth j res) } 
          res <- res ++ tmp ;
          if i < n - 1
          then tmp <- Cons ((nth_1 (i+1) l)+1) Nil
      done ;
      res
    
    let list_increment_recur (l : list int) : list int = 
        ensures { forall i. 0 <= i < length l -> (nth i l) + 1 = (nth i result) }
        match l with
        | Nil -> Nil 
        | Cons x xs -> Cons (x+1) (list_increment_recur xs)
        end
 end