{
    "ideas": [
        {
            "description": "Using a simple recursive function to calculate the sum from 1 to n.",
            "implementation": "module HumanEval060\n\nuse int.Int\n\nlet rec sum_to_n (n : int) : int =\n  if n <= 0 then 0\n  else n + sum_to_n (n - 1)\nend"
        },
        {
            "description": "Using pattern matching to calculate the sum from 1 to n.",
            "implementation": "module HumanEval060\n\nuse int.Int\n\nlet rec sum_to_n (n : int) : int =\n  match n with\n  | 0 -> 0\n  | _ -> n + sum_to_n (n - 1)\n  end\nend"
        },
        {
            "description": "Using an iterative approach with a for-loop to calculate the sum from 1 to n.",
            "implementation": "module HumanEval060\n\nuse int.Int\n\nlet sum_to_n (n : int) : int =\n  let ref sum = 0 in\n  for i = 1 to n do\n    sum <- sum + i\n  done;\n  sum\nend"
        },
        {
            "description": "Using a while-loop to calculate the sum from 1 to n.",
            "implementation": "module HumanEval060\n\nuse int.Int\n\nlet sum_to_n (n : int) : int =\n  let ref sum = 0 in\n  let ref i = 1 in\n  while i <= n do\n    sum <- sum + i;\n    i <- i + 1\n  done;\n  sum\nend"
        },
        {
            "description": "Using an accumulator within a recursive function to calculate the sum from 1 to n.",
            "implementation": "module HumanEval060\n\nuse int.Int\n\nlet rec sum_to_n_acc (n : int) (acc : int) : int =\n  if n <= 0 then acc\n  else sum_to_n_acc (n - 1) (acc + n)\n\nlet sum_to_n (n : int) : int =\n  sum_to_n_acc n 0\nend"
        },
        {
            "description": "Using mathematical formula to calculate the sum from 1 to n.",
            "implementation": "module HumanEval060\n\nuse int.Int\n\nlet sum_to_n (n : int) : int =\n  n * (n + 1) / 2\nend"
        },
        {
            "description": "Using a mutable list to accumulate the sum iteratively.",
            "implementation": "module HumanEval060\n\nuse int.Int\n\nlet sum_to_n (n : int) : int =\n  let ref sum = 0 in\n  let ref i = 1 in\n  while i <= n do\n    sum <- sum + i;\n    i <- i + 1\n  done;\n  sum\nend"
        },
        {
            "description": "Using an iterative approach with a list and sum function.",
            "implementation": "module HumanEval060\n\nuse int.Int\nuse list.List\nuse list.Sum\n\nlet sum_to_n (n : int) : int =\n  let l = Cons 0 (List.init (fun i -> i + 1) n) in\n  sum l\nend"
        },
        {
            "description": "Using a tail-recursive function to sum numbers from 1 to n in an efficient way.",
            "implementation": "module HumanEval060\n\nuse int.Int\n\nlet rec sum_to_n_tail (n : int) (acc : int) : int =\n  if n <= 0 then acc\n  else sum_to_n_tail (n - 1) (acc + n)\n\nlet sum_to_n (n : int) : int =\n  sum_to_n_tail n 0\nend"
        },
        {
            "description": "Using another mathematical approach, leveraging symmetry to calculate sum.",
            "implementation": "module HumanEval060\n\nuse int.Int\n\nlet sum_to_n (n : int) : int =\n  let m = n / 2 in\n  2 * m * (m + 1) + if n mod 2 = 0 then 0 else m + 1\nend"
        }
    ]
}