{
    "ideas": [
        {
            "description": "Using a for-loop to calculate the sum from 1 to n.",
            "implementation": "module HumanEval060\n\n    use int.Int\n\n    let sum_to_n_for (n: int) : int =\n        let ref sum = 0 in\n        for i = 1 to n do\n            sum <- sum + i\n        done ;\n        sum\nend"
        },
        {
            "description": "Using a while-loop to calculate the sum from 1 to n.",
            "implementation": "module HumanEval060\n\n    use int.Int\n\n    let sum_to_n_while (n: int) : int =\n        let ref sum = 0 in\n        let ref i = 1 in\n        while i <= n do\n            sum <- sum + i;\n            i <- i + 1\n        done ;\n        sum\nend"
        },
        {
            "description": "Using recursion and pattern matching to calculate the sum from 1 to n.",
            "implementation": "module HumanEval060\n\n    use int.Int\n\n    let rec sum_to_n_recur (n: int) : int =\n        match n with\n        | 0 -> 0\n        | _ -> n + sum_to_n_recur (n - 1)\nend"
        },
        {
            "description": "Using tail recursion with an accumulator to calculate the sum from 1 to n.",
            "implementation": "module HumanEval060\n\n    use int.Int\n\n    let rec sum_to_n_recur_acc (n: int) (acc: int) : int =\n        match n with\n        | 0 -> acc\n        | _ -> sum_to_n_recur_acc (n - 1) (acc + n)\n\n    let sum_to_n_tail (n: int) : int =\n        sum_to_n_recur_acc n 0\nend"
        },
        {
            "description": "Using recursion and branching (if-then-else) to calculate the sum from 1 to n.",
            "implementation": "module HumanEval060\n\n    use int.Int\n\n    let rec sum_to_n_branch (n: int) : int =\n        if n = 0 then 0 else n + sum_to_n_branch (n - 1)\nend"
        }
    ]
}