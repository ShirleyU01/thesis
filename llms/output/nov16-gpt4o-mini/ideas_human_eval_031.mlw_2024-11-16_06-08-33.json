{
    "ideas": [
        {
            "description": "Using a for-loop to check for primality by dividing n with all integers from 2 to sqrt(n).",
            "implementation": "module IsPrime\n\n    use int.Int\n    use int.Sqrt\n\n    let is_prime_for (n : int) : bool =\n        requires { n >= 1 }\n        ensures { result <=> (forall k. 2 <= k <= sqrt n -> n mod k <> 0) }\n        let limit = sqrt n in\n        for i = 2 to limit do\n            if n mod i = 0 then return false;\n        done;\n        true\nend"
        },
        {
            "description": "Using a while-loop to check for primality by dividing n with all integers from 2 until sqrt(n).",
            "implementation": "module IsPrime\n\n    use int.Int\n    use int.Sqrt\n\n    let is_prime_while (n : int) : bool =\n        requires { n >= 1 }\n        ensures { result <=> (forall k. 2 <= k <= sqrt n -> n mod k <> 0) }\n        let limit = sqrt n in\n        let ref i = 2 in\n        while i <= limit do\n            if n mod i = 0 then return false;\n            i <- i + 1;\n        done;\n        true\nend"
        },
        {
            "description": "Using recursion to determine if n is prime by checking divisibility against smaller primes.",
            "implementation": "module IsPrime\n\n    use int.Int\n\n    let rec is_prime_recur (n : int) (div : int) : bool =\n        requires { n >= 2 }\n        requires { 2 <= div <= sqrt n }\n        ensures { result <=> (n mod div <> 0) /\forall k. 2 <= k <= div -> n mod k <> 0 }\n        if div * div > n then true\n        else if n mod div = 0 then false\n        else is_prime_recur n (div + 1)\n\n    let is_prime (n : int) : bool =\n        requires { n >= 1 }\n        ensures { result <=> (forall k. 2 <= k <= sqrt n -> n mod k <> 0) }\n        if n < 2 then false\n        else is_prime_recur n 2\nend"
        },
        {
            "description": "Using a sieve-like approach with an accumulator to collect potential prime factors and then check primality.",
            "implementation": "module IsPrime\n\n    use int.Int\n\n    let rec sieve (n : int) (i : int) (acc : list int) : list int =\n        requires { n >= 2 }\n        ensures { forall k.\nk < length acc -> acc[k] < n /\forall j. 2 <= j <= acc[k] -> n mod j <> 0 }\n        if i * i > n then acc\n        else if n mod i = 0 then sieve n (i + 1) acc\n        else sieve n (i + 1) (Cons i acc)\n\n    let is_prime_sieve (n : int) : bool =\n        requires { n >= 2 }\n        ensures { result <=> (forall k. 2 <= k <= sqrt n -> n mod k <> 0) }\n        let factors = sieve n 2 Nil in\n        length factors = 0\nend"
        },
        {
            "description": "Using direct recursion with multiple branching conditions to handle various cases for primality.",
            "implementation": "module IsPrime\n\n    use int.Int\n\n    let rec is_prime_branch (n : int) : bool =\n        requires { n >= 1 }\n        ensures { result <=> (forall k. 2 <= k <= sqrt n -> n mod k <> 0) }\n        if n <= 1 then false\n        else if n <= 3 then true\n        else if n mod 2 = 0 then false\n        else is_prime_branch_helper n 3\n\n    let rec is_prime_branch_helper (n : int) (i : int) : bool =\n        requires { n > 3 }\n        ensures { result <=> (forall k. 2 <= k <= sqrt n -> n mod k <> 0) }\n        if i * i > n then true\n        else if n mod i = 0 then false\n        else is_prime_branch_helper n (i + 2)\nend"
        }
    ]
}