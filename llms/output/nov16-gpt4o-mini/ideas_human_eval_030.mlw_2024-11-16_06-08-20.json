{
    "ideas": [
        {
            "description": "Using a for-loop to iterate through the list and collect positive numbers.",
            "implementation": "module HumanEval030\n\n    use list.List\n    use list.Length\n\n    let get_positive (l : list int) : list int =\n        let n = length l in\n        let ref result = [] in\n        for i = 0 to n - 1 do\n            if nth i l > 0 then\n                result <- (nth i l) :: result\n        done;\n        List.rev result\nend"
        },
        {
            "description": "Using a while-loop to traverse the list and filter positive numbers.",
            "implementation": "module HumanEval030\n\n    use list.List\n    use list.Length\n\n    let get_positive (l : list int) : list int =\n        let n = length l in\n        let ref i = 0 in\n        let ref result = [] in\n        while i < n do\n            if nth i l > 0 then\n                result <- (nth i l) :: result;\n            i <- i + 1\n        done;\n        List.rev result\nend"
        },
        {
            "description": "Using recursion and pattern matching to recursively check each element.",
            "implementation": "module HumanEval030\n\n    use list.List\n\n    let rec get_positive (l : list int) : list int =\n        match l with\n        | Nil -> []\n        | Cons x xs -> if x > 0 then x :: get_positive xs else get_positive xs\nend"
        },
        {
            "description": "Using an accumulator with recursion to build the list of positive numbers.",
            "implementation": "module HumanEval030\n\n    use list.List\n\n    let rec get_positive_recur_acc (l : list int) (acc : list int) : list int =\n        match l with\n        | Nil -> acc\n        | Cons x xs -> if x > 0 then get_positive_recur_acc xs (x :: acc) else get_positive_recur_acc xs acc\n\n    let get_positive (l : list int) : list int =\n        get_positive_recur_acc l []\nend"
        },
        {
            "description": "Using recursion with branching (if-then-else) to filter positive numbers.",
            "implementation": "module HumanEval030\n\n    use list.List\n\n    let rec get_positive (l : list int) : list int =\n        match l with\n        | Nil -> []\n        | Cons x xs -> if x > 0 then x :: get_positive xs else get_positive xs\nend"
        }
    ]
}