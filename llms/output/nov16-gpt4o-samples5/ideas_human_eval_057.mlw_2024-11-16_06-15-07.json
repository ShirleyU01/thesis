{
    "ideas": [
        {
            "description": "Using a for-loop to iterate through the list and check monotonicity.",
            "implementation": "module Monotonic\n\n    use int.Int\n    use list.List\n    use list.Length\n    use list.NthNoOpt\n\n    let monotonic_for (t : list int) : bool =\n        let n = length t in\n        if n <= 1 then true\n        else\n            let ref increasing = true in\n            let ref decreasing = true in\n            for i = 0 to n - 2 do\n                if nth i t < nth (i + 1) t then decreasing <- false;\n                if nth i t > nth (i + 1) t then increasing <- false;\n            done;\n            increasing || decreasing\n\nend"
        },
        {
            "description": "Using a while-loop to determine if the list is monotonic.",
            "implementation": "module Monotonic\n\n    use int.Int\n    use list.List\n    use list.Length\n    use list.NthNoOpt\n\n    let monotonic_while (t : list int) : bool =\n        let n = length t in\n        if n <= 1 then true\n        else\n            let ref i = 0 in\n            let ref increasing = true in\n            let ref decreasing = true in\n            while i < n - 1 do\n                if nth i t < nth (i + 1) t then decreasing <- false;\n                if nth i t > nth (i + 1) t then increasing <- false;\n                i <- i + 1\n            done;\n            increasing || decreasing\n\nend"
        },
        {
            "description": "Using recursion and pattern matching to check if the list is monotonic.",
            "implementation": "module Monotonic\n\n    use int.Int\n    use list.List\n    use list.Length\n    use list.NthNoOpt\n\n    let rec monotonic_recur (t : list int) : bool =\n        match t with\n        | Nil -> true\n        | Cons x Nil -> true\n        | Cons x (Cons y xs) ->\n            if x < y then is_increasing y xs\n            else if x > y then is_decreasing y xs\n            else monotonic_recur (Cons y xs)\n        end\n    \n    and is_increasing (prev : int) (xs : list int) : bool =\n        match xs with\n        | Nil -> true\n        | Cons x xs' -> if prev <= x then is_increasing x xs' else false\n        end\n\n    and is_decreasing (prev : int) (xs : list int) : bool =\n        match xs with\n        | Nil -> true\n        | Cons x xs' -> if prev >= x then is_decreasing x xs' else false\n        end\n\nend"
        },
        {
            "description": "Using recursive calls with an accumulator to track monotonicity.",
            "implementation": "module Monotonic\n\n    use int.Int\n    use list.List\n    use list.Length\n    use list.NthNoOpt\n\n    let rec monotonic_recur_accumulator (t : list int) (increasing : bool) (decreasing : bool) : bool =\n        match t with\n        | Nil -> true\n        | Cons x Nil -> true\n        | Cons x (Cons y xs) ->\n            let inc = increasing && (x <= y) in\n            let dec = decreasing && (x >= y) in\n            monotonic_recur_accumulator (Cons y xs) inc dec\n        end\n\n    let monotonic_accumulator (t : list int) : bool =\n        monotonic_recur_accumulator t true true\n\nend"
        },
        {
            "description": "Using recursion and branching (if-then-else) to determine if the list is monotonic.",
            "implementation": "module Monotonic\n\n    use int.Int\n    use list.List\n    use list.Length\n    use list.NthNoOpt\n\n    let rec monotonic_branching (t : list int) : bool =\n        match t with\n        | Nil -> true\n        | Cons x Nil -> true\n        | Cons x (Cons y xs) ->\n            if x < y then is_increasing y xs\n            else if x > y then is_decreasing y xs\n            else monotonic_branching (Cons y xs)\n        end\n\n    and is_increasing (prev : int) (xs : list int) : bool =\n        match xs with\n        | Nil -> true\n        | Cons x xs' -> if prev <= x then is_increasing x xs' else false\n        end\n\n    and is_decreasing (prev : int) (xs : list int) : bool =\n        match xs with\n        | Nil -> true\n        | Cons x xs' -> if prev >= x then is_decreasing x xs' else false\n        end\n\nend"
        }
    ]
}