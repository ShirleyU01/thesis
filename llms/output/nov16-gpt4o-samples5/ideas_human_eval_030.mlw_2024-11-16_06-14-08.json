{
    "ideas": [
        {
            "description": "Using a for-loop to filter positive numbers.",
            "implementation": "module HumanEval030\n\n    use list.List\n    use int.Int\n\n    let get_positive (l: list int) : list int =\n        let ref result = Nil in\n        let n = length l in\n        for i = 0 to n - 1 do\n            let x = nth i l in\n            if x > 0 then result <- Cons x result\n        done;\n        result\n\nend"
        },
        {
            "description": "Using a while-loop to collect positive numbers.",
            "implementation": "module HumanEval030\n\n    use list.List\n    use int.Int\n\n    let get_positive (l: list int) : list int =\n        let n = length l in\n        let ref result = Nil in\n        let ref i = 0 in\n        while i < n do\n            let x = nth i l in\n            if x > 0 then result <- Cons x result;\n            i <- i + 1\n        done;\n        result\n\nend"
        },
        {
            "description": "Using recursion and pattern matching to filter positive numbers.",
            "implementation": "module HumanEval030\n\n    use list.List\n    use int.Int\n\n    let rec get_positive (l: list int) : list int =\n        match l with\n        | Nil -> Nil\n        | Cons x xs ->\n            if x > 0 then Cons x (get_positive xs)\n            else get_positive xs\n        end\n\nend"
        },
        {
            "description": "Using an accumulator within recursion to collect positive numbers.",
            "implementation": "module HumanEval030\n\n    use list.List\n    use int.Int\n\n    let rec get_positive_acc (l: list int) (acc: list int) : list int =\n        match l with\n        | Nil -> acc\n        | Cons x xs ->\n            if x > 0 then get_positive_acc xs (Cons x acc)\n            else get_positive_acc xs acc\n        end\n\n    let get_positive (l: list int) : list int =\n        get_positive_acc l Nil\n\nend"
        },
        {
            "description": "Using recursion with explicit branching (if-then-else) to filter positive numbers.",
            "implementation": "module HumanEval030\n\n    use list.List\n    use int.Int\n\n    let rec get_positive (l: list int) : list int =\n        match l with\n        | Nil -> Nil\n        | Cons x xs ->\n            if x > 0 then Cons x (get_positive xs)\n            else get_positive xs\n        end\n\nend"
        }
    ]
}