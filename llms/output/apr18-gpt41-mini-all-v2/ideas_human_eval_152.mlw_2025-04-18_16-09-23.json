{
    "ideas": [
        {
            "description": "Recursive pattern matching comparing heads of both lists, computing absolute difference with int.Abs, returning Cons of difference and recursive call.",
            "implementation": "module HumanEval152\n\n  use int.Int\n  use int.Abs\n  use list.List\n\n  let rec compare (l1 : list int) (l2 : list int) : list int =\n    match l1, l2 with\n    | Nil, Nil -> Nil\n    | Cons x xs, Cons y ys -> Cons (abs (x - y)) (compare xs ys)\n    | _, _ -> Nil\n    end\nend"
        },
        {
            "description": "Recursive function with explicit if-then-else to check if lists are empty, then recursively compute absolute difference using if-then-else for abs, building list with Cons.",
            "implementation": "module HumanEval152\n\n  use int.Int\n  use list.List\n\n  let rec abs_int (x:int) : int =\n    if x < 0 then -x else x\n\n  let rec compare (l1 : list int) (l2 : list int) : list int =\n    if l1 = Nil && l2 = Nil then Nil\n    else match l1, l2 with\n      | Cons x xs, Cons y ys -> Cons (abs_int (x - y)) (compare xs ys)\n      | _, _ -> Nil\n    end\nend"
        },
        {
            "description": "Use of auxiliary recursive helper with accumulative parameter for results in reversed order, then reverse at end to return correct order.",
            "implementation": "module HumanEval152\n\n  use int.Int\n  use int.Abs\n  use list.List\n  use list.Reverse\n\n  let rec compare_aux (l1 : list int) (l2 : list int) (acc : list int) : list int =\n    match l1, l2 with\n    | Nil, Nil -> reverse acc\n    | Cons x xs, Cons y ys -> compare_aux xs ys (Cons (abs (x - y)) acc)\n    | _, _ -> reverse acc\n    end\n\n  let compare (l1 : list int) (l2 : list int) : list int = compare_aux l1 l2 Nil\nend"
        },
        {
            "description": "Define and use a custom nth_my function to get elements by index, iterate via for-loop with mutable reference to build result list in reversed order, then reverse it.",
            "implementation": "module HumanEval152\n\n  use int.Int\n  use int.Abs\n  use list.List\n  use list.Length\n  use list.Reverse\n\n  let rec nth_my (n : int) (l : list int) : int =\n    requires { length l > 0 }\n    requires { 0 <= n /\n               n < length l }\n    variant { n }\n    match l with\n    | Cons x r -> if n = 0 then x else nth_my (n - 1) r\n    end\n\n  let compare (l1 : list int) (l2 : list int) : list int =\n    let n = length l1 in\n    let ref acc = Nil in\n    for i = n - 1 downto 0 do\n      acc <- Cons (abs (nth_my i l1 - nth_my i l2)) acc\n    done ;\n    acc\nend"
        },
        {
            "description": "Use combine function from List.Combine to zip two lists into pairs, then recursively map over combined list computing absolute differences.",
            "implementation": "module HumanEval152\n\n  use int.Int\n  use int.Abs\n  use list.List\n  use list.Combine\n\n  let rec compare_pairs (lp : list (int, int)) : list int =\n    match lp with\n    | Nil -> Nil\n    | Cons (x, y) xs -> Cons (abs (x - y)) (compare_pairs xs)\n    end\n\n  let compare (l1 : list int) (l2 : list int) : list int =\n    let combined = combine l1 l2 in\n    compare_pairs combined\nend"
        },
        {
            "description": "Recursive function that handles empty list cases explicitly, and uses pattern matching with if-then-else inside to compute absolute difference without abs function by branching.",
            "implementation": "module HumanEval152\n\n  use int.Int\n  use list.List\n\n  let rec compare (l1 : list int) (l2 : list int) : list int =\n    match l1, l2 with\n    | Nil, Nil -> Nil\n    | Cons x xs, Cons y ys ->\n      let diff = x - y in\n      let abs_diff = if diff < 0 then -diff else diff in\n      Cons abs_diff (compare xs ys)\n    | _, _ -> Nil\n    end\nend"
        },
        {
            "description": "Recursive function using pattern matching and let-binding to compute difference, then use a local function to compute absolute value inline, returning recursive list.",
            "implementation": "module HumanEval152\n\n  use int.Int\n  use list.List\n\n  let rec compare (l1 : list int) (l2 : list int) : list int =\n    let abs_val (x:int) : int = if x < 0 then -x else x in\n    match l1, l2 with\n    | Nil, Nil -> Nil\n    | Cons x xs, Cons y ys ->\n      let diff = x - y in\n      Cons (abs_val diff) (compare xs ys)\n    | _, _ -> Nil\n    end\nend"
        },
        {
            "description": "Iterative approach with while loop and mutable references for index and accumulation in reversed list, followed by final reversal before returning result.",
            "implementation": "module HumanEval152\n\n  use int.Int\n  use int.Abs\n  use list.List\n  use list.Length\n  use list.Reverse\n\n  let rec nth_my (n : int) (l : list int) : int =\n    requires { length l > 0 }\n    requires { 0 <= n /\n               n < length l }\n    variant { n }\n    match l with\n    | Cons x r -> if n = 0 then x else nth_my (n - 1) r\n    end\n\n  let compare (l1 : list int) (l2 : list int) : list int =\n    let n = length l1 in\n    let ref i = 0 in\n    let ref acc = Nil in\n    while !i < n do\n      acc <- Cons (abs (nth_my !i l1 - nth_my !i l2)) acc;\n      i <- !i + 1\n    done;\n    reverse acc\nend"
        },
        {
            "description": "Recursive compare function with pattern matching and using max and min from int.MinMax to compute absolute difference instead of abs function.",
            "implementation": "module HumanEval152\n\n  use int.Int\n  use int.MinMax\n  use list.List\n\n  let abs_alt (x:int) : int =\n    max x (-x)\n\n  let rec compare (l1 : list int) (l2 : list int) : list int =\n    match l1, l2 with\n    | Nil, Nil -> Nil\n    | Cons x xs, Cons y ys -> Cons (abs_alt (x - y)) (compare xs ys)\n    | _, _ -> Nil\n    end\nend"
        },
        {
            "description": "Recursive function that uses nested pattern matching on input lists and a helper inline function to compute absolute difference, returning 0 if equal.",
            "implementation": "module HumanEval152\n\n  use int.Int\n  use list.List\n\n  let rec compare (l1 : list int) (l2 : list int) : list int =\n    let abs_diff (a:int) (b:int) : int =\n      if a = b then 0 else if a > b then a - b else b - a\n    in\n    match l1, l2 with\n    | Nil, Nil -> Nil\n    | Cons x xs, Cons y ys -> Cons (abs_diff x y) (compare xs ys)\n    | _, _ -> Nil\n    end\nend"
        }
    ]
}