{
    "ideas": [
        {
            "description": "Recursive check with two helper functions to verify strictly non-decreasing and strictly non-increasing order separately, then combine results.",
            "implementation": "module HumanEval057\n\n  use int.Int\n  use list.List\n  use list.Length\n\n  let rec non_decreasing (l: list int) : bool =\n    match l with\n    | Nil -> true\n    | Cons _ Nil -> true\n    | Cons x (Cons y ys) -> if x <= y then non_decreasing (Cons y ys) else false\n    end\n\n  let rec non_increasing (l: list int) : bool =\n    match l with\n    | Nil -> true\n    | Cons _ Nil -> true\n    | Cons x (Cons y ys) -> if x >= y then non_increasing (Cons y ys) else false\n    end\n\n  let monotonic (l: list int) : bool =\n    non_decreasing l || non_increasing l\nend"
        },
        {
            "description": "Recursive function with explicit pattern matching that checks pairwise ordering once and then recurses on tail, returning false immediately if order violated.",
            "implementation": "module HumanEval057\n\n  use int.Int\n  use list.List\n\n  let rec monotonic (l: list int) : bool =\n    match l with\n    | Nil -> true\n    | Cons _ Nil -> true\n    | Cons x (Cons y xs) ->\n        if x = y then monotonic (Cons y xs)\n        else if x < y then\n          (* check non-decreasing remainder *)\n          let rec check_non_decreasing (l': list int) : bool =\n            match l' with\n            | Nil -> true\n            | Cons _ Nil -> true\n            | Cons a (Cons b bs) -> if a <= b then check_non_decreasing (Cons b bs) else false\n            end\n          in check_non_decreasing (Cons y xs)\n        else\n          (* check non-increasing remainder *)\n          let rec check_non_increasing (l': list int) : bool =\n            match l' with\n            | Nil -> true\n            | Cons _ Nil -> true\n            | Cons a (Cons b bs) -> if a >= b then check_non_increasing (Cons b bs) else false\n            end\n          in check_non_increasing (Cons y xs)\n    end\nend"
        },
        {
            "description": "Use an accumulator recursive helper to track current direction (increasing, decreasing, or unknown) and validate all pairs accordingly.",
            "implementation": "module HumanEval057\n\n  use int.Int\n  use list.List\n\n  type direction = Unknown | Increasing | Decreasing\n\n  let rec monotonic_aux (l : list int) (dir : direction) : bool =\n    match l with\n    | Nil -> true\n    | Cons _ Nil -> true\n    | Cons x (Cons y ys) ->\n        if x = y then monotonic_aux (Cons y ys) dir\n        else if dir = Unknown then\n          if x < y then monotonic_aux (Cons y ys) Increasing else monotonic_aux (Cons y ys) Decreasing\n        else if dir = Increasing then\n          if x <= y then monotonic_aux (Cons y ys) Increasing else false\n        else (* Decreasing *)\n          if x >= y then monotonic_aux (Cons y ys) Decreasing else false\n    end\n\n  let monotonic (l: list int) : bool =\n    monotonic_aux l Unknown\nend"
        },
        {
            "description": "Iterate through the list with explicit index using a custom nth_my function and check monotonicity by scanning once forward and once backward.",
            "implementation": "module HumanEval057\n\n  use int.Int\n  use list.List\n  use list.Length\n\n  let rec nth_my (n : int) (l : list int) : int =\n    requires { length l > 0 }\n    requires { 0 <= n /\n               n < length l }\n    variant { n }\n    match l with\n    | Cons x r -> if n = 0 then x else nth_my (n - 1) r\n    end\n\n  let monotonic (l: list int) : bool =\n    let len = length l in\n    if len <= 1 then true else\n    let ref inc = true in\n    let ref dec = true in\n    let rec loop (i : int) : bool =\n      if i >= len - 1 then inc || dec else\n        let x = nth_my i l in\n        let y = nth_my (i + 1) l in\n        if x > y then inc <- false;\n        if x < y then dec <- false;\n        loop (i + 1)\n    in loop 0\nend"
        },
        {
            "description": "Use pattern matching with recursive helper that checks both increasing and decreasing conditions simultaneously, returning false if neither holds at any pair.",
            "implementation": "module HumanEval057\n\n  use int.Int\n  use list.List\n\n  let rec helper (l: list int) : bool =\n    match l with\n    | Nil -> true\n    | Cons _ Nil -> true\n    | Cons x (Cons y ys) ->\n        if x <= y then helper (Cons y ys)\n        else if x >= y then helper (Cons y ys)\n        else false\n    end\n\n  let monotonic (l: list int) : bool = helper l\nend"
        },
        {
            "description": "Use two separate recursive functions to check for non-decreasing and non-increasing order, then combine results with logical OR in monotonic function.",
            "implementation": "module HumanEval057\n\n  use int.Int\n  use list.List\n\n  let rec is_non_decreasing (l: list int) : bool =\n    match l with\n    | Nil -> true\n    | Cons _ Nil -> true\n    | Cons x (Cons y ys) -> if x <= y then is_non_decreasing (Cons y ys) else false\n    end\n\n  let rec is_non_increasing (l: list int) : bool =\n    match l with\n    | Nil -> true\n    | Cons _ Nil -> true\n    | Cons x (Cons y ys) -> if x >= y then is_non_increasing (Cons y ys) else false\n    end\n\n  let monotonic (l: list int) : bool =\n    is_non_decreasing l || is_non_increasing l\nend"
        },
        {
            "description": "Use recursion with accumulator that keeps track of previous element and flags for increasing/decreasing, returning true only if one flag remains true throughout.",
            "implementation": "module HumanEval057\n\n  use int.Int\n  use list.List\n\n  let rec helper (l: list int) (prev: int) (inc: bool) (dec: bool) : bool =\n    match l with\n    | Nil -> inc || dec\n    | Cons x xs ->\n        let inc' = inc && (prev <= x) in\n        let dec' = dec && (prev >= x) in\n        if not inc' && not dec' then false else helper xs x inc' dec'\n    end\n\n  let monotonic (l: list int) : bool =\n    match l with\n    | Nil -> true\n    | Cons x xs -> helper xs x true true\n    end\nend"
        },
        {
            "description": "Convert list to list of pairs of consecutive elements, then recursively check if all pairs are non-decreasing or all non-increasing by separate functions.",
            "implementation": "module HumanEval057\n\n  use int.Int\n  use list.List\n\n  let rec pairs (l: list int) : list (int * int) =\n    match l with\n    | Nil -> Nil\n    | Cons _ Nil -> Nil\n    | Cons x (Cons y ys) -> Cons (x, y) (pairs (Cons y ys))\n    end\n\n  let rec all_non_decreasing_pairs (l: list (int * int)) : bool =\n    match l with\n    | Nil -> true\n    | Cons (a, b) xs -> if a <= b then all_non_decreasing_pairs xs else false\n    end\n\n  let rec all_non_increasing_pairs (l: list (int * int)) : bool =\n    match l with\n    | Nil -> true\n    | Cons (a, b) xs -> if a >= b then all_non_increasing_pairs xs else false\n    end\n\n  let monotonic (l: list int) : bool =\n    let p = pairs l in\n    all_non_decreasing_pairs p || all_non_increasing_pairs p\nend"
        },
        {
            "description": "Iterate through the list using recursion and track sign of differences between consecutive elements; if sign flips, return false, else true at end.",
            "implementation": "module HumanEval057\n\n  use int.Int\n\n  use list.List\n\n  type sign = Zero | Positive | Negative\n\n  let sign_of (x: int) : sign =\n    if x > 0 then Positive else if x < 0 then Negative else Zero\n\n  let rec monotonic_aux (l: list int) (prev_sign: sign) : bool =\n    match l with\n    | Nil -> true\n    | Cons _ Nil -> true\n    | Cons x (Cons y ys) ->\n        let diff = y - x in\n        let cur_sign = sign_of diff in\n        match prev_sign, cur_sign with\n        | Zero, _ -> monotonic_aux (Cons y ys) cur_sign\n        | _, Zero -> monotonic_aux (Cons y ys) prev_sign\n        | _, _ -> if prev_sign = cur_sign then monotonic_aux (Cons y ys) prev_sign else false\n    end\n\n  let monotonic (l: list int) : bool =\n    monotonic_aux l Zero\nend"
        },
        {
            "description": "Use two recursive functions to check for strictly increasing and strictly decreasing sequences, allowing equality by treating equal elements as part of monotonicity, then combine results.",
            "implementation": "module HumanEval057\n\n  use int.Int\n  use list.List\n\n  let rec strictly_non_decreasing (l: list int) : bool =\n    match l with\n    | Nil -> true\n    | Cons _ Nil -> true\n    | Cons x (Cons y ys) -> if x <= y then strictly_non_decreasing (Cons y ys) else false\n    end\n\n  let rec strictly_non_increasing (l: list int) : bool =\n    match l with\n    | Nil -> true\n    | Cons _ Nil -> true\n    | Cons x (Cons y ys) -> if x >= y then strictly_non_increasing (Cons y ys) else false\n    end\n\n  let monotonic (l: list int) : bool =\n    strictly_non_decreasing l || strictly_non_increasing l\nend"
        }
    ]
}