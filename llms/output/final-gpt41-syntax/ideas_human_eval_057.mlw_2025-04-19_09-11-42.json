{
    "ideas": [
        {
            "description": "Iterative check for monotonicity by traversing the list twice: once for non-decreasing, once for non-increasing.",
            "implementation": "module HumanEval057\n  use list.List\n  use int.Int\n\n  let rec is_non_decreasing (l: list int) : bool =\n    match l with\n    | Nil -> true\n    | Cons _ Nil -> true\n    | Cons x (Cons y t) -> if x > y then false else is_non_decreasing (Cons y t)\n    end\n\n  let rec is_non_increasing (l: list int) : bool =\n    match l with\n    | Nil -> true\n    | Cons _ Nil -> true\n    | Cons x (Cons y t) -> if x < y then false else is_non_increasing (Cons y t)\n    end\n\n  let monotonic (l: list int) : bool =\n    is_non_decreasing l || is_non_increasing l\nend"
        },
        {
            "description": "Recursive helper that determines the trend (increasing, decreasing, or equal), then validates the rest of the list accordingly.",
            "implementation": "module HumanEval057\n  use list.List\n  use int.Int\n\n  let rec helper (trend: int) (l: list int) : bool =\n    match l with\n    | Nil -> true\n    | Cons _ Nil -> true\n    | Cons x (Cons y t) ->\n        if trend = 0 then\n          if x < y then helper 1 (Cons y t)\n          else if x > y then helper (-1) (Cons y t)\n          else helper 0 (Cons y t)\n        else if trend = 1 then\n          if x > y then false else helper 1 (Cons y t)\n        else if trend = -1 then\n          if x < y then false else helper (-1) (Cons y t)\n        else false\n    end\n\n  let monotonic (l: list int) : bool = helper 0 l\nend"
        },
        {
            "description": "Check for monotonicity by using a single recursive pass, keeping two booleans for both directions.",
            "implementation": "module HumanEval057\n  use list.List\n  use int.Int\n\n  let rec helper (l: list int) (inc: bool) (dec: bool) : bool =\n    match l with\n    | Nil -> true\n    | Cons _ Nil -> true\n    | Cons x (Cons y t) ->\n        let inc' = inc && (x <= y) in\n        let dec' = dec && (x >= y) in\n        helper (Cons y t) inc' dec'\n    end\n\n  let monotonic (l: list int) : bool = helper l true true\nend"
        },
        {
            "description": "Detect monotonicity by checking if the list is sorted in increasing or decreasing order via a generic comparison function.",
            "implementation": "module HumanEval057\n  use list.List\n  use int.Int\n\n  let rec sorted_with (cmp: int -> int -> bool) (l: list int) : bool =\n    match l with\n    | Nil -> true\n    | Cons _ Nil -> true\n    | Cons x (Cons y t) -> if cmp x y then sorted_with cmp (Cons y t) else false\n    end\n\n  let monotonic (l: list int) : bool =\n    sorted_with (fun x y -> x <= y) l || sorted_with (fun x y -> x >= y) l\nend"
        },
        {
            "description": "Iterative approach using an accumulator to remember the previous value and current monotonic direction.",
            "implementation": "module HumanEval057\n  use list.List\n  use int.Int\n\n  let rec find_trend (prev: int) (l: list int) : int =\n    match l with\n    | Nil -> 0\n    | Cons x t ->\n        if prev < x then 1\n        else if prev > x then -1\n        else find_trend x t\n    end\n\n  let rec check_same_trend (trend: int) (prev: int) (l: list int) : bool =\n    match l with\n    | Nil -> true\n    | Cons x t ->\n        if trend = 1 && prev > x then false\n        else if trend = -1 && prev < x then false\n        else check_same_trend trend x t\n    end\n\n  let monotonic (l: list int) : bool =\n    match l with\n    | Nil -> true\n    | Cons x t ->\n        let trend = find_trend x t in\n        match t with\n        | Nil -> true\n        | _ -> if trend = 0 then true else check_same_trend trend x t\n        end\n    end\nend"
        },
        {
            "description": "Short-circuit check for trivial lists (length \u2264 2) and otherwise recursively compare all consecutive pairs.",
            "implementation": "module HumanEval057\n  use list.List\n  use int.Int\n  use list.Length\n\n  let rec all_pairs (cmp: int -> int -> bool) (l: list int) : bool =\n    match l with\n    | Nil -> true\n    | Cons _ Nil -> true\n    | Cons x (Cons y t) -> if cmp x y then all_pairs cmp (Cons y t) else false\n    end\n\n  let monotonic (l: list int) : bool =\n    if length l <= 2 then true\n    else all_pairs (fun x y -> x <= y) l || all_pairs (fun x y -> x >= y) l\nend"
        },
        {
            "description": "Count the number of times the direction changes and ensure it never changes more than once.",
            "implementation": "module HumanEval057\n  use list.List\n  use int.Int\n\n  let rec count_trend_changes (prev: int) (trend: int) (l: list int) (changes: int) : int =\n    match l with\n    | Nil -> changes\n    | Cons x t ->\n        let new_trend = if prev < x then 1 else if prev > x then -1 else 0 in\n        let new_changes = if trend = 0 || new_trend = 0 || trend = new_trend then changes else changes + 1 in\n        count_trend_changes x (if new_trend = 0 then trend else new_trend) t new_changes\n    end\n\n  let monotonic (l: list int) : bool =\n    match l with\n    | Nil -> true\n    | Cons x t -> count_trend_changes x 0 t 0 <= 1\n    end\nend"
        },
        {
            "description": "Use two mutually recursive functions, one for checking non-decreasing and one for non-increasing order.",
            "implementation": "module HumanEval057\n  use list.List\n  use int.Int\n\n  let rec non_decreasing (l: list int) : bool =\n    match l with\n    | Nil -> true\n    | Cons _ Nil -> true\n    | Cons x (Cons y t) -> x <= y && non_decreasing (Cons y t)\n    end\n\n  let rec non_increasing (l: list int) : bool =\n    match l with\n    | Nil -> true\n    | Cons _ Nil -> true\n    | Cons x (Cons y t) -> x >= y && non_increasing (Cons y t)\n    end\n\n  let monotonic (l: list int) : bool = non_decreasing l || non_increasing l\nend"
        },
        {
            "description": "Convert the list to a sequence of differences and check their signs to infer monotonicity.",
            "implementation": "module HumanEval057\n  use list.List\n  use int.Int\n\n  let rec differences (l: list int) : list int =\n    match l with\n    | Nil -> Nil\n    | Cons _ Nil -> Nil\n    | Cons x (Cons y t) -> Cons (y - x) (differences (Cons y t))\n    end\n\n  let rec all_nonneg (l: list int) : bool =\n    match l with\n    | Nil -> true\n    | Cons x t -> x >= 0 && all_nonneg t\n    end\n\n  let rec all_nonpos (l: list int) : bool =\n    match l with\n    | Nil -> true\n    | Cons x t -> x <= 0 && all_nonpos t\n    end\n\n  let monotonic (l: list int) : bool =\n    let diffs = differences l in\n    all_nonneg diffs || all_nonpos diffs\nend"
        },
        {
            "description": "Single-pass recursive function that infers direction on-the-go and validates the sequence accordingly, ignoring equal elements.",
            "implementation": "module HumanEval057\n  use list.List\n  use int.Int\n\n  let rec check_monotonic (trend: int) (l: list int) : bool =\n    match l with\n    | Nil -> true\n    | Cons _ Nil -> true\n    | Cons x (Cons y t) ->\n        if x = y then check_monotonic trend (Cons y t)\n        else if trend = 0 then check_monotonic (if x < y then 1 else -1) (Cons y t)\n        else if trend = 1 then if x > y then false else check_monotonic 1 (Cons y t)\n        else if trend = -1 then if x < y then false else check_monotonic (-1) (Cons y t)\n        else false\n    end\n\n  let monotonic (l: list int) : bool = check_monotonic 0 l\nend"
        }
    ]
}