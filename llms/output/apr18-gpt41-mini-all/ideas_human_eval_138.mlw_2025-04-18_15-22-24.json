{
    "ideas": [
        {
            "description": "Check if n is at least 8 and divisible by 2, since the smallest sum of four positive even numbers is 8 (2+2+2+2). Return true iff n >= 8 and even.",
            "implementation": "module HumanEval138\n\nuse int.Int\nuse int.EuclideanDivision\n\nlet is_equal_to_sum_even (n: int) : bool =\n  begin\n    if n >= 8 && mod n 2 = 0 then true else false\n  end\n\nend"
        },
        {
            "description": "Recursive approach trying to subtract 2 (the smallest positive even number) four times from n, ensuring n stays positive and even at each step.",
            "implementation": "module HumanEval138\n\nuse int.Int\nuse int.EuclideanDivision\n\nlet rec is_equal_to_sum_even_aux (n: int) (count: int) : bool =\n  if count = 4 then n = 0\n  else if n <= 0 || mod n 2 <> 0 then false\n  else is_equal_to_sum_even_aux (n - 2) (count + 1)\n\nlet is_equal_to_sum_even (n: int) : bool =\n  is_equal_to_sum_even_aux n 0\n\nend"
        },
        {
            "description": "Pattern matching on n to check explicit base cases and then use subtraction to check if the remaining is sum of 3 positive even numbers recursively.",
            "implementation": "module HumanEval138\n\nuse int.Int\nuse int.EuclideanDivision\n\nlet rec is_equal_to_sum_even (n: int) : bool =\n  match n with\n  | x when x < 8 -> false\n  | x when mod x 2 <> 0 -> false\n  | x -> is_equal_to_sum_even (x - 2) && is_equal_to_sum_even (x - 6) || x = 8\n  end\n\nend"
        },
        {
            "description": "Use a loop to iterate over all possible combinations of four positive even numbers (2,4,6,...) up to n to check if any combination sums to n.",
            "implementation": "module HumanEval138\n\nuse int.Int\nuse int.EuclideanDivision\nuse list.List\nuse list.Length\n\nlet is_equal_to_sum_even (n: int) : bool =\n  if n < 8 then false\n  else\n    let ref found = false in\n    let ref a = 2 in\n    while a <= n - 6 && not found do\n      let ref b = 2 in\n      while b <= n - a - 4 && not found do\n        let ref c = 2 in\n        while c <= n - a - b - 2 && not found do\n          let d = n - a - b - c in\n          if d >= 2 && mod d 2 = 0 then found <- true;\n          c <- c + 2\n        done;\n        b <- b + 2\n      done;\n      a <- a + 2\n    done;\n    found\n\nend"
        },
        {
            "description": "Check if n is divisible by 2 and then verify that n div 2 is at least 4 (since 4 positive even numbers each at least 2 sum to n).",
            "implementation": "module HumanEval138\n\nuse int.Int\nuse int.EuclideanDivision\n\nlet is_equal_to_sum_even (n: int) : bool =\n  begin\n    if n >= 8 && mod n 2 = 0 && (div n 2) >= 4 then true else false\n  end\n\nend"
        },
        {
            "description": "Use a helper recursive function that tries assigning values 2 to n-6 to the first even number and recursively check the remaining sum for 3 even numbers.",
            "implementation": "module HumanEval138\n\nuse int.Int\nuse int.EuclideanDivision\n\nlet rec can_sum_even (n: int) (count: int) : bool =\n  if count = 0 then n = 0\n  else if n < 2 * count then false\n  else\n    let rec try_val (v: int) : bool =\n      if v > n then false\n      else if mod v 2 = 0 && can_sum_even (n - v) (count - 1) then true\n      else try_val (v + 2)\n    in\n    try_val 2\n\nlet is_equal_to_sum_even (n: int) : bool =\n  can_sum_even n 4\n\nend"
        },
        {
            "description": "Use direct arithmetic check: since sum of 4 positive even numbers equals 2 * (sum of 4 positive integers), check if n is divisible by 2 and n div 2 >= 4.",
            "implementation": "module HumanEval138\n\nuse int.Int\nuse int.EuclideanDivision\n\nlet is_equal_to_sum_even (n: int) : bool =\n  begin\n    mod n 2 = 0 && div n 2 >= 4\n  end\n\nend"
        },
        {
            "description": "Use pattern matching with explicit cases for n<8 returning false, and otherwise return true only if n is even.",
            "implementation": "module HumanEval138\n\nuse int.Int\nuse int.EuclideanDivision\n\nlet is_equal_to_sum_even (n: int) : bool =\n  match n with\n  | x when x < 8 -> false\n  | x -> mod x 2 = 0\n  end\n\nend"
        },
        {
            "description": "Use a recursive approach with pattern matching that tries subtracting even numbers 2,4,6,... from n and reduces count of numbers needed from 4 to 0.",
            "implementation": "module HumanEval138\n\nuse int.Int\nuse int.EuclideanDivision\n\nlet rec is_equal_to_sum_even_aux (n: int) (count: int) : bool =\n  if count = 0 then n = 0\n  else if n <= 0 then false\n  else\n    let rec try_even (v: int) : bool =\n      if v > n then false\n      else if mod v 2 = 0 && is_equal_to_sum_even_aux (n - v) (count - 1) then true\n      else try_even (v + 2)\n    in\n    try_even 2\n\nlet is_equal_to_sum_even (n: int) : bool =\n  is_equal_to_sum_even_aux n 4\n\nend"
        },
        {
            "description": "Use a purely arithmetic check that returns true iff n >= 8 and n is even (since any n >= 8 even can be represented as sum of 4 positive evens, e.g. 2,2,2,n-6).",
            "implementation": "module HumanEval138\n\nuse int.Int\nuse int.EuclideanDivision\n\nlet is_equal_to_sum_even (n: int) : bool =\n  if n >= 8 && mod n 2 = 0 then true else false\n\nend"
        }
    ]
}