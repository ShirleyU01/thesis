{
    "ideas": [
        {
            "description": "Iterative check for non-decreasing and non-increasing lists using two separate helpers.",
            "implementation": "module HumanEval057\n  use import int.Int\n  use import list.List\n\n  let rec is_non_decreasing (l: list int) : bool =\n    match l with\n    | Nil -> true\n    | Cons _ Nil -> true\n    | Cons x (Cons y r) -> if x <= y then is_non_decreasing (Cons y r) else false\n    end\n\n  let rec is_non_increasing (l: list int) : bool =\n    match l with\n    | Nil -> true\n    | Cons _ Nil -> true\n    | Cons x (Cons y r) -> if x >= y then is_non_increasing (Cons y r) else false\n    end\n\n  let monotonic (l: list int) : bool =\n    is_non_decreasing l || is_non_increasing l\nend"
        },
        {
            "description": "Single recursive function infers trend from the first two elements, then checks the rest.",
            "implementation": "module HumanEval057\n  use import int.Int\n  use import list.List\n\n  let rec monotonic_rec (l: list int) (dir: int) : bool =\n    match l with\n    | Nil -> true\n    | Cons _ Nil -> true\n    | Cons x (Cons y r) ->\n      if dir = 0 then\n        monotonic_rec (Cons y r) (if x < y then 1 else if x > y then -1 else 0)\n      else if dir > 0 then\n        if x <= y then monotonic_rec (Cons y r) dir else false\n      else\n        if x >= y then monotonic_rec (Cons y r) dir else false\n    end\n\n  let monotonic (l: list int) : bool =\n    monotonic_rec l 0\nend"
        },
        {
            "description": "Check monotonicity by filtering pairs and ensuring all differences are non-negative (for increasing) or non-positive (for decreasing).",
            "implementation": "module HumanEval057\n  use import int.Int\n  use import list.List\n  use import list.Length\n\n  let rec all_nonneg (l: list int) : bool =\n    match l with\n    | Nil -> true\n    | Cons x Nil -> true\n    | Cons x (Cons y r) -> if y - x >= 0 then all_nonneg (Cons y r) else false\n    end\n\n  let rec all_nonpos (l: list int) : bool =\n    match l with\n    | Nil -> true\n    | Cons x Nil -> true\n    | Cons x (Cons y r) -> if y - x <= 0 then all_nonpos (Cons y r) else false\n    end\n\n  let monotonic (l: list int) : bool =\n    all_nonneg l || all_nonpos l\nend"
        },
        {
            "description": "Iterate through the list using an accumulator and a flag indicating trend: 0 (unknown), 1 (increasing), -1 (decreasing).",
            "implementation": "module HumanEval057\n  use import int.Int\n  use import list.List\n\n  let rec check_monotonic (prev: int) (l: list int) (dir: int) : bool =\n    match l with\n    | Nil -> true\n    | Cons x r ->\n      if dir = 0 then\n        check_monotonic x r (if prev < x then 1 else if prev > x then -1 else 0)\n      else if dir = 1 then\n        if prev <= x then check_monotonic x r 1 else false\n      else\n        if prev >= x then check_monotonic x r -1 else false\n    end\n\n  let monotonic (l: list int) : bool =\n    match l with\n    | Nil -> true\n    | Cons x r -> check_monotonic x r 0\n    end\nend"
        },
        {
            "description": "Recursive function that checks both increasing and decreasing at each step, branching as needed.",
            "implementation": "module HumanEval057\n  use import int.Int\n  use import list.List\n\n  let rec is_mono (l: list int) : bool =\n    match l with\n    | Nil -> true\n    | Cons _ Nil -> true\n    | Cons x (Cons y r) ->\n      if x < y then\n        is_mono (Cons y r) && (forall z. match r with Nil -> true | Cons z _ -> y <= z end)\n      else if x > y then\n        is_mono (Cons y r) && (forall z. match r with Nil -> true | Cons z _ -> y >= z end)\n      else\n        is_mono (Cons y r)\n    end\n\n  let monotonic (l: list int) : bool =\n    is_mono l\nend"
        },
        {
            "description": "Count number of increases and decreases; ensure one of them is zero for monotonicity.",
            "implementation": "module HumanEval057\n  use import int.Int\n  use import list.List\n\n  let rec count_inc_dec (l: list int) (inc: int) (dec: int) : (int, int) =\n    match l with\n    | Nil -> (inc, dec)\n    | Cons _ Nil -> (inc, dec)\n    | Cons x (Cons y r) ->\n      if x < y then count_inc_dec (Cons y r) (inc+1) dec\n      else if x > y then count_inc_dec (Cons y r) inc (dec+1)\n      else count_inc_dec (Cons y r) inc dec\n    end\n\n  let monotonic (l: list int) : bool =\n    let (inc, dec) = count_inc_dec l 0 0 in\n    inc = 0 || dec = 0\nend"
        },
        {
            "description": "Use a helper to check that the list is sorted either ascending or descending using a generic comparator.",
            "implementation": "module HumanEval057\n  use import int.Int\n  use import list.List\n\n  let rec sorted_by (cmp: int -> int -> bool) (l: list int) : bool =\n    match l with\n    | Nil -> true\n    | Cons _ Nil -> true\n    | Cons x (Cons y r) ->\n      if cmp x y then sorted_by cmp (Cons y r) else false\n    end\n\n  let monotonic (l: list int) : bool =\n    sorted_by (\\x y. x <= y) l || sorted_by (\\x y. x >= y) l\nend"
        },
        {
            "description": "Iterate through the list and build a list of differences, then ensure all differences are non-negative or non-positive.",
            "implementation": "module HumanEval057\n  use import int.Int\n  use import list.List\n\n  let rec diffs (l: list int) : list int =\n    match l with\n    | Nil -> Nil\n    | Cons _ Nil -> Nil\n    | Cons x (Cons y r) -> Cons (y - x) (diffs (Cons y r))\n    end\n\n  let rec all_nonneg (l: list int) : bool =\n    match l with\n    | Nil -> true\n    | Cons x r -> x >= 0 && all_nonneg r\n    end\n\n  let rec all_nonpos (l: list int) : bool =\n    match l with\n    | Nil -> true\n    | Cons x r -> x <= 0 && all_nonpos r\n    end\n\n  let monotonic (l: list int) : bool =\n    let d = diffs l in\n    all_nonneg d || all_nonpos d\nend"
        },
        {
            "description": "Check monotonicity by folding over the list and maintaining a trend state.",
            "implementation": "module HumanEval057\n  use import int.Int\n  use import list.List\n\n  type trend = Unknown | Inc | Dec\n\n  let rec fold_monotonic (l: list int) (prev: int) (t: trend) : bool =\n    match l with\n    | Nil -> true\n    | Cons x r ->\n      match t with\n      | Unknown ->\n        fold_monotonic r x (if prev < x then Inc else if prev > x then Dec else Unknown)\n      | Inc -> if prev <= x then fold_monotonic r x Inc else false\n      | Dec -> if prev >= x then fold_monotonic r x Dec else false\n      end\n    end\n\n  let monotonic (l: list int) : bool =\n    match l with\n    | Nil -> true\n    | Cons x r -> fold_monotonic r x Unknown\n    end\nend"
        },
        {
            "description": "Use a single recursive function with optional previous value to compare and deduce monotonicity.",
            "implementation": "module HumanEval057\n  use import int.Int\n  use import list.List\n  use import option.Option\n\n  let rec monotonic_helper (prev: option int) (l: list int) (dir: int) : bool =\n    match l with\n    | Nil -> true\n    | Cons x r ->\n      match prev with\n      | None -> monotonic_helper (Some x) r dir\n      | Some y ->\n        if dir = 0 then\n          let d = if y < x then 1 else if y > x then -1 else 0 in\n          monotonic_helper (Some x) r d\n        else if dir = 1 then\n          if y <= x then monotonic_helper (Some x) r 1 else false\n        else\n          if y >= x then monotonic_helper (Some x) r -1 else false\n      end\n    end\n\n  let monotonic (l: list int) : bool =\n    monotonic_helper None l 0\nend"
        }
    ]
}