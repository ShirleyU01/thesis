{
    "ideas": [
        {
            "description": "Use two separate helper functions to check if the list is monotonically increasing or decreasing.",
            "implementation": "module HumanEval057\n  use list.List\n  use list.Length\n\n  let rec is_increasing (l : list int) : bool =\n    match l with\n    | Nil -> true\n    | Cons x Nil -> true\n    | Cons x (Cons y ys) -> if x <= y then is_increasing (Cons y ys) else false\n    end\n\n  let rec is_decreasing (l : list int) : bool =\n    match l with\n    | Nil -> true\n    | Cons x Nil -> true\n    | Cons x (Cons y ys) -> if x >= y then is_decreasing (Cons y ys) else false\n    end\n\n  let monotonic (l : list int) : bool =\n    is_increasing l || is_decreasing l\nend"
        },
        {
            "description": "Use a single recursive helper function with an accumulator to compare consecutive elements.",
            "implementation": "module HumanEval057\n  use list.List\n  use list.Length\n\n  let rec helper (l : list int) (acc : int) (inc : bool) : bool =\n    match l with\n    | Nil -> true\n    | Cons x xs -> if (inc && acc <= x) || (not inc && acc >= x) then helper xs x inc else false\n    end\n\n  let monotonic (l : list int) : bool =\n    match l with\n    | Nil -> true\n    | Cons x xs -> helper xs x true || helper xs x false\n    end\nend"
        },
        {
            "description": "Check both increasing and decreasing properties simultaneously in a single recursive function.",
            "implementation": "module HumanEval057\n  use list.List\n  use list.Length\n\n  let rec check (l : list int) (inc : bool) (dec : bool) : bool =\n    match l with\n    | Nil -> true\n    | Cons x Nil -> true\n    | Cons x (Cons y ys) -> check (Cons y ys) (inc && x <= y) (dec && x >= y)\n    end\n\n  let monotonic (l : list int) : bool =\n    check l true true\nend"
        },
        {
            "description": "Use pattern matching to handle lists of different lengths and compare elements directly.",
            "implementation": "module HumanEval057\n  use list.List\n  use list.Length\n\n  let rec monotonic (l : list int) : bool =\n    match l with\n    | Nil -> true\n    | Cons x Nil -> true\n    | Cons x (Cons y ys) ->\n      if x <= y then\n        match ys with\n        | Nil -> true\n        | Cons z zs -> (y <= z) && monotonic (Cons y ys)\n        end\n      else\n        match ys with\n        | Nil -> true\n        | Cons z zs -> (y >= z) && monotonic (Cons y ys)\n        end\n    end\nend"
        },
        {
            "description": "Iterate through the list using a while loop and check the monotonic condition with flags.",
            "implementation": "module HumanEval057\n  use list.List\n  use list.Length\n  use int.Int\n\n  let monotonic (l : list int) : bool =\n    let inc = ref true in\n    let dec = ref true in\n    let rec loop (l : list int) : unit =\n      match l with\n      | Nil -> ()\n      | Cons x Nil -> ()\n      | Cons x (Cons y ys) ->\n        if x < y then dec := false\n        else if x > y then inc := false;\n        loop (Cons y ys)\n      end\n    in\n    loop l;\n    !inc || !dec\nend"
        },
        {
            "description": "Use a recursive approach with accumulators for both increasing and decreasing order checks.",
            "implementation": "module HumanEval057\n  use list.List\n  use list.Length\n\n  let rec check_acc (l : list int) (inc_acc : bool) (dec_acc : bool) : bool =\n    match l with\n    | Nil -> inc_acc || dec_acc\n    | Cons x Nil -> inc_acc || dec_acc\n    | Cons x (Cons y ys) ->\n        check_acc (Cons y ys) (inc_acc && x <= y) (dec_acc && x >= y)\n    end\n\n  let monotonic (l : list int) : bool =\n    check_acc l true true\nend"
        },
        {
            "description": "A single traversal of the list, checking both conditions for increasing and decreasing sequences.",
            "implementation": "module HumanEval057\n  use list.List\n  use list.Length\n\n  let rec single_traversal (l : list int) (inc : bool) (dec : bool) : bool =\n    match l with\n    | Nil -> inc || dec\n    | Cons x Nil -> inc || dec\n    | Cons x (Cons y ys) ->\n        single_traversal (Cons y ys) (inc && x <= y) (dec && x >= y)\n    end\n\n  let monotonic (l : list int) : bool =\n    single_traversal l true true\nend"
        },
        {
            "description": "Iterate through the list with a for loop and update flags for increasing or decreasing order.",
            "implementation": "module HumanEval057\n  use list.List\n  use list.Length\n  use int.Int\n\n  let monotonic (l : list int) : bool =\n    let inc = ref true in\n    let dec = ref true in\n    for i = 0 to length l - 2 do\n      let x = nth_my i l in\n      let y = nth_my (i + 1) l in\n      if x < y then dec := false\n      else if x > y then inc := false\n    done;\n    !inc || !dec\nend"
        },
        {
            "description": "Use guards in pattern matching to handle different cases of list structure and element comparison.",
            "implementation": "module HumanEval057\n  use list.List\n  use list.Length\n\n  let rec monotonic (l : list int) : bool =\n    match l with\n    | Nil -> true\n    | Cons x Nil -> true\n    | Cons x (Cons y ys) ->\n        if x <= y then\n          match ys with\n          | Nil -> true\n          | Cons z _ -> (y <= z) && monotonic (Cons y ys)\n          end\n        else\n          match ys with\n          | Nil -> true\n          | Cons z _ -> (y >= z) && monotonic (Cons y ys)\n          end\n    end\nend"
        },
        {
            "description": "Check monotonicity using an auxiliary function that handles both increasing and decreasing checks.",
            "implementation": "module HumanEval057\n  use list.List\n  use list.Length\n\n  let rec aux (l : list int) (inc : bool) (dec : bool) : bool =\n    match l with\n    | Nil -> inc || dec\n    | Cons x Nil -> inc || dec\n    | Cons x (Cons y ys) ->\n        aux (Cons y ys) (inc && x <= y) (dec && x >= y)\n    end\n\n  let monotonic (l : list int) : bool =\n    aux l true true\nend"
        }
    ]
}