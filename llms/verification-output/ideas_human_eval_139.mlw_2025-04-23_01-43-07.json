{
    "ideas": [
        {
            "description": "Add a variant to the recursive function special_factorial to prove termination. The implementation and contract remain unchanged. The variant is n, which decreases with each recursive call, ensuring automatic proof of termination. No additional lemmas or ghost code are necessary, as the SMT solver can prove the contract from the axiomatized spec_fact and the definition of fact.",
            "implementation": "module HumanEval139\n  use int.Int\n  use int.Fact\n\n  predicate spec_fact (n : int) (a : int)\n    axiom spec_fact_base :\n      forall a. spec_fact 1 a <-> a = 1\n    axiom spec_fact_ind :\n      forall a n . spec_fact n a <-> exists b. spec_fact (n-1) b /\\ a = b * fact n\n\n  let rec special_factorial (n: int) : int\n    ensures { spec_fact n result }\n    variant { n }\n    = if n = 0 then 1 else fact n * special_factorial (n-1)\nend\n"
        }
    ]
}