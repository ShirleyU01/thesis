{
    "ideas": [
        {
            "description": "Add loop invariants and a variant to the loop in sum_to_n to ensure that the result satisfies the postcondition sum n result. The loop invariants relate acc to the sum predicate, and the variant guarantees termination.",
            "implementation": "module HumanEval060\n  use int.Int\n\n  predicate sum (n : int) (a : int)\n    axiom sum_zero :\n        forall a. sum 0 a <-> a = 0\n    axiom sum_ind :\n        forall a n . sum n a <-> exists b. sum (n-1) b /\\ a = b + n \n\n  let sum_to_n (n: int) : int =\n    ensures { sum n result }\n    let ref acc = 0 in\n    let ref i = 1 in\n    while i <= n do\n      invariant { 1 <= i <= n+1 /\\ sum (i-1) acc }\n      variant { n - i + 1 }\n      acc <- acc + i;\n      i <- i + 1\n    done;\n    acc\nend\n"
        }
    ]
}