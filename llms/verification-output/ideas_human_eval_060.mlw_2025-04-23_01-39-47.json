{
    "ideas": [
        {
            "description": "Add appropriate ensures/postconditions to make_list, and a lemma relating sum of make_list to sum predicate. This allows automatic proof of sum_to_n's postcondition. No changes to the implementation or contract, only specification additions and a supporting lemma.",
            "implementation": "module HumanEval060\n  use int.Int\n  use list.List\n  use list.Sum\n\n  predicate sum (n : int) (a : int)\n    axiom sum_zero :\n        forall a. sum 0 a <-> a = 0\n    axiom sum_ind :\n        forall a n . sum n a <-> exists b. sum (n-1) b /\\ a = b + n   \n\n  let rec make_list (a: int) (b: int) : list int\n    ensures { forall i:int. 0 <= i < length result -> nth result i = a + i }\n    ensures { length result = (if a > b then 0 else b - a + 1) }\n    variant { if a > b then 0 else b - a + 1 }\n    = if a > b then Nil else Cons a (make_list (a + 1) b)\n\n  (* Lemma: The sum of the list generated by make_list 1 n is the sum from 1 to n *)\n  lemma sum_of_make_list:\n    forall n:int. n >= 0 ->\n      sum n (sum (make_list 1 n))\n\n  let sum_to_n (n: int) : int =\n    ensures { sum n result }\n    sum (make_list 1 n)\nend\n"
        }
    ]
}