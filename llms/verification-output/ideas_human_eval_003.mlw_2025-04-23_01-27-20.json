{
    "ideas": [
        {
            "description": "Add variant to below_zero_acc for termination and add contract to below_zero_acc to relate it to ever_below_zero predicate. This makes the proof of below_zero's ensures clause automatic. The key is to specify that below_zero_acc (ops, bal) returns true iff ever_below_zero bal ops, and to use 'length operations' as variant for termination.",
            "implementation": "module HumanEval003\n  use list.List\n  use int.Int\n  use list.Length\n  use list.Prefix\n  use list.Sum\n\n  predicate ever_below_zero (init : int) (ops : list int) =\n    exists k:int. 0 <= k <= length ops /\\ init + sum (prefix k ops) < 0\n\n  let rec below_zero_acc (operations: list int) (bal: int) : bool\n    requires { true }\n    ensures  { result <-> ever_below_zero bal operations }\n    variant  { length operations }\n  =\n    match operations with\n    | Nil -> false\n    | Cons x xs -> \n      let bal2 = bal + x in\n      if bal2 < 0 then true else below_zero_acc xs bal2\n    end\n\n  let below_zero (operations: list int) : bool =\n    ensures { result <-> ever_below_zero 0 operations }\n    below_zero_acc operations 0\nend\n"
        }
    ]
}