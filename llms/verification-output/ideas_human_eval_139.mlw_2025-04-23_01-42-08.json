{
    "ideas": [
        {
            "description": "Add a for-loop invariant relating the accumulator res to the desired product of factorials, using a ghost variable to precisely track the intended product at each loop iteration. This invariant allows the SMT solvers to automatically verify that at the end of the loop, res is equal to the product n! * (n-1)! * ... * 1!. No changes to the function's interface or contract are needed.",
            "implementation": "module HumanEval139\n  use int.Int\n  use int.Fact\n\n  predicate spec_fact (n : int) (a : int)\n    axiom spec_fact_base :\n      forall a. spec_fact 1 a <-> a = 1\n    axiom spec_fact_ind :\n      forall a n . spec_fact n a <-> exists b. spec_fact (n-1) b /\\ a = b * fact n\n\n  let special_factorial (n: int) : int =\n    ensures { spec_fact n result }\n    let ref res = 1 in\n    (* Invariant: at the beginning of each iteration, res = \\prod_{k=1}^{i-1} fact k *)\n    for i = 1 to n do\n      invariant { 1 <= i <= n+1 }\n      invariant {\n        res = (if i = 1 then 1 else (\n          let ghost prod = ref 1 in\n          for j = 1 to i-1 do prod := !prod * fact j done;\n          !prod\n        ))\n      }\n      res <- res * fact i\n    done;\n    res\nend\n"
        }
    ]
}