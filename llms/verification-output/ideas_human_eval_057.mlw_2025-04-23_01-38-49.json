{
    "ideas": [
        {
            "description": "Add variants for termination and strengthen contracts for helper functions to assist with monotonicity proof. Add postconditions to get_direction and check_dir, and variants for their recursion. The ensures specification for monotonic is unchanged.",
            "implementation": "module HumanEval057\n  use int.Int\n  use list.List\n  use list.Length\n  use list.NthNoOpt\n\n  let rec get_direction (l: list int) : int\n    variant { length l }\n    ensures {\n      (result = 1 -> (exists i. 0 <= i < length l - 1 /\\ nth i l < nth (i+1) l)) /\\\n      (result = -1 -> (exists i. 0 <= i < length l - 1 /\\ nth i l > nth (i+1) l)) /\\\n      (result = 0 -> (\n        (forall i. 0 <= i < length l - 1 -> nth i l = nth (i+1) l) \\/ length l <= 1\n      ))\n    }\n    =\n    match l with\n    | Cons x (Cons y r) ->\n        if x < y then 1 else if x > y then -1 else get_direction (Cons y r)\n    | _ -> 0\n    end\n\n  let rec check_dir (l: list int) (dir: int) : bool\n    variant { length l }\n    ensures {\n      result <-> (\n        if dir = 1 then forall i. 0 <= i < length l - 1 -> nth i l <= nth (i+1) l\n        else if dir = -1 then forall i. 0 <= i < length l - 1 -> nth i l >= nth (i+1) l\n        else true\n      )\n    }\n    =\n    match l with\n    | Cons x (Cons y r) ->\n        if dir = 1 then (x <= y && check_dir (Cons y r) dir)\n        else if dir = -1 then (x >= y && check_dir (Cons y r) dir)\n        else check_dir (Cons y r) dir\n    | _ -> true\n    end\n\n  let monotonic (l: list int) : bool =\n    ensures { result <-> ((forall i. 0 <= i < length l - 1 -> (nth i l < nth (i + 1) l)) \n                               \\/ (forall i. 0 <= i < length l - 1 -> (nth i l > nth (i + 1) l))) }\n    check_dir l (get_direction l)\nend\n"
        }
    ]
}