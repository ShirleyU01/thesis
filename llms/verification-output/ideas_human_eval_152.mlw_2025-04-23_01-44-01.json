{
    "ideas": [
        {
            "description": "Add a variant to the recursive function 'compare' to prove termination. The variant is 'length l1', which decreases at each recursive step. This allows SMT solvers to automatically verify the code. No further invariants or lemmas are needed as the postconditions can be discharged automatically.",
            "implementation": "module HumanEval152\n  use int.Int\n  use int.Abs\n  use list.List\n  use list.Length\n  use list.NthNoOpt\n\n  let rec compare (l1 : list int) (l2 : list int) : list int\n    ensures { length result = length l1 }\n    ensures { length l1 = length l2 }\n    ensures { forall i: int. 0 <= i < length l1 -> nth i result = abs (nth i l1 - nth i l2)}\n    variant { length l1 }\n    match l1, l2 with\n    | Nil, Nil -> Nil\n    | Cons x xs, Cons y ys ->\n        if x = y then Cons 0 (compare xs ys)\n        else Cons (abs (x - y)) (compare xs ys)\n    | _, _ -> Nil\n    end\nend\n"
        }
    ]
}