{
    "ideas": [
        {
            "description": "Add a variant to check_dir to prove termination, and add pre/postconditions to check_dir to relate its result to monotonicity. Add auxiliary lemmas to bridge check_dir and the contract of monotonic. No changes to implementation or monotonic's contract.",
            "implementation": "module HumanEval057\n  use int.Int\n  use list.List\n  use list.Length\n  use list.NthNoOpt\n\n  (* Auxiliary predicate for monotonic increasing *)\n  predicate mono_incr (l: list int) =\n    forall i:int. 0 <= i < length l - 1 -> nth i l < nth (i + 1) l\n\n  (* Auxiliary predicate for monotonic decreasing *)\n  predicate mono_decr (l: list int) =\n    forall i:int. 0 <= i < length l - 1 -> nth i l > nth (i + 1) l\n\n  (* Predicate for monotonic in either direction *)\n  predicate mono (l: list int) = mono_incr l \\/ mono_decr l\n\n  let rec check_dir (l: list int) (dir: int) : bool\n    variant { length l }\n    ensures {\n      result ->\n        match l with\n        | Nil -> true\n        | Cons _ Nil -> true\n        | _ ->\n            (\n              (dir = 1 -> mono_incr l) /\\\n              (dir = -1 -> mono_decr l) /\\\n              (dir = 0 -> mono l)\n            )\n        end\n    }\n    ensures {\n      match l with\n      | Nil -> result = true\n      | Cons _ Nil -> result = true\n      | _ -> true\n      end\n    }\n  =\n    match l with\n    | Nil -> true\n    | Cons _ Nil -> true\n    | Cons x (Cons y r) ->\n      if dir = 0 then\n        if x < y then check_dir (Cons y r) 1\n        else if x > y then check_dir (Cons y r) (-1)\n        else check_dir (Cons y r) 0\n      else if dir = 1 then\n        if x <= y then check_dir (Cons y r) 1 else false\n      else\n        if x >= y then check_dir (Cons y r) (-1) else false\n    end\n\n  (* Lemmas to connect check_dir result with monotonicity predicates *)\n  lemma check_dir_0_mono:\n    forall l: list int. check_dir l 0 = true -> mono l\n\n  lemma mono_check_dir_0:\n    forall l: list int. mono l -> check_dir l 0 = true\n\n  let monotonic (l: list int) : bool =\n    ensures { result <-> ((forall i. 0 <= i < length l - 1 -> (nth i l < nth (i + 1) l)) \n                                \\/ (forall i. 0 <= i < length l - 1 -> (nth i l > nth (i + 1) l))) }\n    check_dir l 0\nend\n"
        }
    ]
}