{
    "ideas": [
        {
            "description": "To verify that below_zero satisfies its postcondition, we add a variant to the recursive function below_zero_rec to prove termination. We also add a postcondition to below_zero_rec relating its result to ever_below_zero, which is critical for the verification of below_zero. We introduce a lemma that proves the relationship between below_zero_rec and ever_below_zero, and we use this lemma in the postcondition of below_zero_rec. All additions are compatible with automatic proof by SMT solvers.",
            "implementation": "module HumanEval003\n  use list.List\n  use int.Int\n  use list.Length\n  use list.Prefix\n  use list.Sum\n\n  predicate ever_below_zero (init : int) (ops : list int) =\n    exists k:int. 0 <= k <= length ops /\\ init + sum (prefix k ops) < 0\n\n  (* Lemma: below_zero_rec xs bal returns true iff ever_below_zero bal xs *)\n  lemma below_zero_rec_correct: forall bal ops. below_zero_rec ops bal = true <-> ever_below_zero bal ops\n\n  let rec below_zero_rec (ops: list int) (bal: int) : bool\n    variant { length ops }\n    ensures { result <-> ever_below_zero bal ops }\n  =\n    match ops with\n    | Nil -> false\n    | Cons x xs ->\n      let bal' = bal + x in\n      if bal' < 0 then true else below_zero_rec xs bal'\n    end\n\n  let below_zero (operations: list int) : bool =\n    ensures { result <-> ever_below_zero 0 operations }\n    below_zero_rec operations 0\nend\n"
        }
    ]
}