{
    "ideas": [
        {
            "description": "To verify the implementation, we connect the contract to the mathematical property: n can be written as the sum of 4 positive even numbers if and only if n >= 8 and n is even. We add a lemma stating that for all n, (n >= 8 and even) iff n is a sum of four positive even numbers. We also prove that the function's contract characterizes this exactly. All proofs are handled by SMT solvers. No code change, only lemmas and auxiliary logic are added.",
            "implementation": "module HumanEval138\n  use int.Int\n  use int.EuclideanDivision\n\n  predicate is_sum_of_4_positive_even (n:int) =\n    exists a b c d:int.\n      a > 0 /\\ mod a 2 = 0 /\\\n      b > 0 /\\ mod b 2 = 0 /\\\n      c > 0 /\\ mod c 2 = 0 /\\\n      d > 0 /\\ mod d 2 = 0 /\\\n      n = a + b + c + d\n\n  lemma sum_of_4_positive_even_characterization:\n    forall n:int. is_sum_of_4_positive_even(n) <-> (n >= 8 /\\ mod n 2 = 0)\n    proof\n      (* \n         (=>) direction: If n is sum of 4 positive even numbers, each >=2, so n >= 8, sum even.\n         (<=) direction: If n >= 8 and even, n = 2 + 2 + 2 + (n - 6), with n-6 >= 2 and even.\n      *)\n      left: \n        assume { is_sum_of_4_positive_even(n) }\n        then have { exists a b c d:int. a>0 /\\ even(a) /\\ b>0 /\\ even(b) /\\ c>0 /\\ even(c) /\\ d>0 /\\ even(d) /\\ n = a+b+c+d }\n        then have { a>=2 /\\ b>=2 /\\ c>=2 /\\ d>=2 } by arithmetic\n        then have { n = a+b+c+d >= 8 }\n        also all even so n even.\n        thus { n >= 8 /\\ mod n 2 = 0 }\n      right:\n        assume { n >= 8 /\\ mod n 2 = 0 }\n        then n-6 >= 2 /\\ even(n-6)\n        let a=2, b=2, c=2, d=n-6 in\n        have { a>0 /\\ even(a) /\\ b>0 /\\ even(b) /\\ c>0 /\\ even(c) /\\ d>0 /\\ even(d) /\\ n = a+b+c+d }\n        thus { is_sum_of_4_positive_even(n) }\n      qed\n\n  let is_equal_to_sum_even (n: int) : bool =\n    ensures { result <-> (mod n 2 = 0) /\\ (n >= 8) }\n    if n >= 8 && mod n 2 = 0 then true else false\nend\n"
        }
    ]
}