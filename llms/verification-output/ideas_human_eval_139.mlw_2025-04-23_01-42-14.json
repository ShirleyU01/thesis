{
    "ideas": [
        {
            "description": "Add a loop invariant to the for loop in special_factorial to relate the accumulator res to the specification spec_fact and guarantee the postcondition. This allows the SMT solver to verify that at the end of the loop, res satisfies spec_fact n res. No variant is needed for the for loop. Implementation is unchanged except for the invariant.",
            "implementation": "module HumanEval139\n  use int.Int\n  use int.Fact\n\n  predicate spec_fact (n : int) (a : int)\n    axiom spec_fact_base :\n      forall a. spec_fact 1 a <-> a = 1\n    axiom spec_fact_ind :\n      forall a n . spec_fact n a <-> exists b. spec_fact (n-1) b /\\ a = b * fact n\n\n  let special_factorial (n: int) : int =\n    ensures { spec_fact n result }\n    let ref res = 1 in\n    for i = 1 to n do\n      invariant { 1 <= i <= n+1 /\\ spec_fact (i-1) res }\n      res <- res * fact i\n    done;\n    res\nend\n"
        }
    ]
}