{
    "ideas": [
        {
            "description": "Add loop invariants to the for loop in monotonic to ensure that the values of inc and dec track the monotonicity predicates correctly. The invariants maintain that inc is true if and only if all pairs up to the current index are strictly increasing, and dec is true if and only if all pairs up to the current index are strictly decreasing. This enables the postcondition to be discharged automatically by SMT solvers.",
            "implementation": "module HumanEval057\n  use int.Int\n  use list.List\n  use list.Length\n  use list.NthNoOpt\n  use list.Mem\n\n  let rec nth_my (n : int) (l : list int) : int =\n    requires { length l > 0 }\n    requires { 0 <= n /\\ n < length l }\n    ensures  { nth n l = result }\n    ensures  { mem result l }\n    variant { n }\n    match l with \n    | Cons x r -> if n = 0 then x else nth_my (n - 1) r\n    end\n\n  let monotonic (l : list int) : bool =\n    ensures { result <-> ((forall i. 0 <= i < length l - 1 -> (nth i l < nth (i + 1) l)) \n                                \\/ (forall i. 0 <= i < length l - 1 -> (nth i l > nth (i + 1) l))) }\n    let n = length l in\n    if n <= 1 then true else\n    let ref inc = true in\n    let ref dec = true in\n    (* Invariant: for all j in 1 .. i-1, inc = true <-> strictly increasing up to j, dec = true <-> strictly decreasing up to j *)\n    for i = 1 to n-1 do\n      invariant { 1 <= i <= n }\n      invariant { inc <-> (forall j. 1 <= j < i -> nth_my j l >= nth_my (j-1) l) = false /\\ (forall j. 1 <= j < i -> nth_my j l < nth_my (j-1) l) = false /\\ (forall j. 1 <= j < i -> nth_my j l > nth_my (j-1) l) = true /\n                  inc <-> (forall j. 1 <= j < i -> nth (j-1) l < nth j l) }\n      invariant { dec <-> (forall j. 1 <= j < i -> nth_my j l <= nth_my (j-1) l) = false /\\ (forall j. 1 <= j < i -> nth_my j l > nth_my (j-1) l) = false /\\ (forall j. 1 <= j < i -> nth_my j l < nth_my (j-1) l) = true /\n                  dec <-> (forall j. 1 <= j < i -> nth (j-1) l > nth j l) }\n      if nth_my i l < nth_my (i-1) l then inc <- false;\n      if nth_my i l > nth_my (i-1) l then dec <- false;\n    done;\n    inc || dec\nend\n"
        }
    ]
}