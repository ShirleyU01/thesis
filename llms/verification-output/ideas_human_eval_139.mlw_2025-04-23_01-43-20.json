{
    "ideas": [
        {
            "description": "Add loop invariants and a variant to the while loop in `special_factorial` to ensure the function meets its postcondition and proves termination. The invariants capture the ongoing product of factorials, the bounds of `i`, and the connection between `res` and the specification.",
            "implementation": "module HumanEval139\n  use int.Int\n  use int.Fact\n\n  predicate spec_fact (n : int) (a : int)\n    axiom spec_fact_base :\n      forall a. spec_fact 1 a <-> a = 1\n    axiom spec_fact_ind :\n      forall a n. spec_fact n a <-> exists b. spec_fact (n-1) b /\\ a = b * fact n\n\n  let special_factorial (n: int) : int =\n    ensures { spec_fact n result }\n    let ref res = 1 in\n    let ref i = n in\n    while i > 0 do\n      invariant { 0 <= i <= n }\n      invariant { exists k. k = i /\\\n        (exists b. spec_fact k b /\\ res = b * (product j. i < j <= n -> fact j)) }\n      invariant { forall m:int. i < m <= n -> res mod fact m = 0 }\n      invariant { exists b. spec_fact i b /\\ res = b * (product j. i < j <= n -> fact j) }\n      variant { i }\n      res <- res * fact i;\n      i <- i - 1\n    done;\n    res\nend\n"
        }
    ]
}