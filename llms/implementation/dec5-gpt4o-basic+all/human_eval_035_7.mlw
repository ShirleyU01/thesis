(*
def max_element(l: list):
    """Return maximum element in the list.
    >>> max_element([1, 2, 3])
    3
    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
    123
    """ 
 *)

module HumanEval035Goal

    use int.Int
    use list.List
    use list.Length
    use list.NthNoOpt

    (* verified *)
    let rec max_element (t : list int) : int =
    requires { length t > 0 }
    ensures { forall j. 0 <= j < length t -> result >= nth j t }
    ensures { exists j. 0 <= j < length t /\ result = nth j t } 
    variant { t }
    match t with
    | Cons x Nil -> x
    | Cons x xs -> if x > (max_element xs) then x else (max_element xs)
    end
   
end

(* INSERT_CHATGPT_CODE *)

module HumanEval035

use int.Int
use list.List
use list.Reverse

let rec max_element (t : list int) : int =
  let reversed = reverse t in
  match reversed with
  | Cons x xs ->
    let rec find_max_rev (lst : list int) (current_max : int) : int =
      match lst with
      | Nil -> current_max
      | Cons y ys -> find_max_rev ys (if y > current_max then y else current_max)
      end
    in
    find_max_rev xs x
  end
end

module TestHumanEval035

    use int.Int
    use list.List
    use HumanEval035

    let test1 () : bool =
        max_element (Cons 1 (Cons 2 (Cons 3 Nil))) = 3

    let test1_output () : (list int, int, int) =
        (Cons 1 (Cons 2 (Cons 3 Nil)), max_element (Cons 1 (Cons 2 (Cons 3 Nil))), 3)

    let test2 () : bool =
        max_element (Cons 5 (Cons 3 (Cons (-5) (Cons 2 (Cons (-3) (Cons 3 (Cons 9 (Cons 0 (Cons 123 (Cons 1 (Cons (-10) Nil))))))))))) = 123

    let test2_output () : (list int, int, int) =
        (Cons 5 (Cons 3 (Cons (-5) (Cons 2 (Cons (-3) (Cons 3 (Cons 9 (Cons 0 (Cons 123 (Cons 1 (Cons (-10) Nil)))))))))),
         max_element (Cons 5 (Cons 3 (Cons (-5) (Cons 2 (Cons (-3) (Cons 3 (Cons 9 (Cons 0 (Cons 123 (Cons 1 (Cons (-10) Nil))))))))))),
         123)

    let test3 () : bool =
        max_element (Cons (-1) (Cons (-2) (Cons (-3) (Cons (-4) (Cons (-5) Nil))))) = (-1)

    let test3_output () : (list int, int, int) =
        (Cons (-1) (Cons (-2) (Cons (-3) (Cons (-4) (Cons (-5) Nil)))),
         max_element (Cons (-1) (Cons (-2) (Cons (-3) (Cons (-4) (Cons (-5) Nil))))),
         (-1))

    let test4 () : bool =
        max_element (Cons 100 Nil) = 100

    let test4_output () : (list int, int, int) =
        (Cons 100 Nil, max_element (Cons 100 Nil), 100)

    let test5 () : bool =
        max_element (Cons 1 (Cons 1 (Cons 1 (Cons 1 Nil)))) = 1

    let test5_output () : (list int, int, int) =
        (Cons 1 (Cons 1 (Cons 1 (Cons 1 Nil))), max_element (Cons 1 (Cons 1 (Cons 1 (Cons 1 Nil)))), 1)

    let test6 () : bool =
        max_element (Cons 10 (Cons 20 (Cons 30 (Cons 40 (Cons 50 Nil))))) = 50

    let test6_output () : (list int, int, int) =
        (Cons 10 (Cons 20 (Cons 30 (Cons 40 (Cons 50 Nil)))), max_element (Cons 10 (Cons 20 (Cons 30 (Cons 40 (Cons 50 Nil))))), 50)

    let test7 () : bool =
        max_element (Cons 0 (Cons (-10) (Cons 10 (Cons (-10) (Cons 0 Nil))))) = 10

    let test7_output () : (list int, int, int) =
        (Cons 0 (Cons (-10) (Cons 10 (Cons (-10) (Cons 0 Nil)))), max_element (Cons 0 (Cons (-10) (Cons 10 (Cons (-10) (Cons 0 Nil))))), 10)

    let test8 () : bool =
        max_element (Cons 7 (Cons 7 (Cons 3 (Cons 5 (Cons 7 (Cons 2 (Cons 7 (Cons 1 (Cons 7 Nil))))))))) = 7

    let test8_output () : (list int, int, int) =
        (Cons 7 (Cons 7 (Cons 3 (Cons 5 (Cons 7 (Cons 2 (Cons 7 (Cons 1 (Cons 7 Nil)))))))),
         max_element (Cons 7 (Cons 7 (Cons 3 (Cons 5 (Cons 7 (Cons 2 (Cons 7 (Cons 1 (Cons 7 Nil))))))))),
         7)

    let test9 () : bool =
        max_element (Cons (-100) (Cons (-200) (Cons (-300) (Cons (-400) (Cons (-50) Nil))))) = (-50)

    let test9_output () : (list int, int, int) =
        (Cons (-100) (Cons (-200) (Cons (-300) (Cons (-400) (Cons (-50) Nil)))),
         max_element (Cons (-100) (Cons (-200) (Cons (-300) (Cons (-400) (Cons (-50) Nil))))),
         (-50))

    let test10 () : bool =
        max_element (Cons 123 (Cons 4 (Cons 56 (Cons 78 (Cons 99 (Cons 0 Nil)))))) = 123

    let test10_output () : (list int, int, int) =
        (Cons 123 (Cons 4 (Cons 56 (Cons 78 (Cons 99 (Cons 0 Nil))))),
         max_element (Cons 123 (Cons 4 (Cons 56 (Cons 78 (Cons 99 (Cons 0 Nil)))))),
         123)

    let testall () : bool = 
        test1() && test2() && test3() && test4() && test5() && test6() && test7() && test8() && test9() && test10()

    let testfail () : list int =
        let ref res = Nil in 
        if not test1() then res <- Cons 1 res;
        if not test2() then res <- Cons 2 res;
        if not test3() then res <- Cons 3 res;
        if not test4() then res <- Cons 4 res;
        if not test5() then res <- Cons 5 res;
        if not test6() then res <- Cons 6 res;
        if test7() then res <- Cons 7 res;
        if test8() then res <- Cons 8 res;
        if not test9() then res <- Cons 9 res;
        if not test10() then res <- Cons 10 res;
        res

    let runtest (x : int) : (list int, int, int) =
        let ref res = (Nil, -1, -1) in
        if x = 1 then res <- test1_output();
        if x = 2 then res <- test2_output();
        if x = 3 then res <- test3_output();
        if x = 4 then res <- test4_output();
        if x = 5 then res <- test5_output();
        if x = 6 then res <- test6_output();
        if x = 7 then res <- test7_output();
        if x = 8 then res <- test8_output();
        if x = 9 then res <- test9_output();
        if x = 10 then res <- test10_output();
        res
    
    let rec failoutput (l : list int) : list (list int, int, int) =
        match l with
        | Nil -> Nil
        | Cons x xs -> Cons (runtest x) (failoutput xs)
        end
    
    let test() : list (list int, int, int) =
        let l = testfail () in
        failoutput l

end
