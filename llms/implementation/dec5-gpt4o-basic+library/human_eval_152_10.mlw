(*
def compare(game,guess):
    """I think we all remember that feeling when the result of some long-awaited
    event is finally known. The feelings and thoughts you have at that moment are
    definitely worth noting down and comparing.
    Your task is to determine if a person correctly guessed the results of a number of matches.
    You are given two arrays of scores and guesses of equal length, where each index shows a match.
    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,
    the value is 0, and if not, the value is the absolute difference between the guess and the score.


    example:

    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]
    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]
    """
 *)

module HumanEval152Goal

    use int.Int
    use int.Abs
    use list.List

    let rec compare (l1 : list int) (l2 : list int) : list int = 
        match (l1, l2) with
        | Nil, Nil -> Nil
        | Cons x xs, Cons y ys -> Cons (abs (x - y)) (compare xs ys)
        end

end

(* INSERT_CHATGPT_CODE *)

module HumanEval152
  use int.Int
  use int.Abs
  use list.List
  use list.Length
  
  let compare (l1 : list int) (l2 : list int) : list int =
    let len = length l1 in
    let rec build_result i acc =
      if i < len then
        let Cons(h1, t1) = nth i l1 in
        let Cons(h2, t2) = nth i l2 in
        build_result (i + 1) (acc ++ Cons(abs (h1 - h2), Nil))
      else acc
    in
    build_result 0 Nil
end

module TestHumanEval152

    use int.Int
    use list.List
    use list.NthNoOpt
    use list.Length
    use HumanEval152

    let rec nth_1 (n : int) (l : list int) : int =
        requires { length l > 0 }
        requires { 0 <= n /\ n < length l }
        variant { n }
        ensures { nth n l = result }
        match l with 
        | Cons x r -> if n = 0 then x else nth_1 (n - 1) r
        end 

    let list_eq (l1 : list int) (l2 : list int) : bool =
        requires {length l1 = length l2}
        ensures { result -> forall i. 0 <= i < length l1 -> nth i l1 = nth i l2 }
        let n = length l1 in
        let ref res = true in
        for i = 0 to (n-1) do
            invariant {res = false \/ forall j. 0 <= j < i -> nth j l1 = nth j l2 }
            if not (nth_1 i l1 = nth_1 i l2)
            then res <- false
        done;
        res

    let test1 () : bool =
        list_eq (compare (Cons 1 (Cons 2 (Cons 3 (Cons 4 (Cons 5 (Cons 1 Nil)))))) 
                         (Cons 1 (Cons 2 (Cons 3 (Cons 4 (Cons 2 (Cons (-2) Nil))))))) 
                (Cons 0 (Cons 0 (Cons 0 (Cons 0 (Cons 3 (Cons 3 Nil))))))

    let test1_output () : (list int, list int, list int, list int) =
        (Cons 1 (Cons 2 (Cons 3 (Cons 4 (Cons 5 (Cons 1 Nil))))), 
         Cons 1 (Cons 2 (Cons 3 (Cons 4 (Cons 2 (Cons (-2) Nil))))), 
         compare (Cons 1 (Cons 2 (Cons 3 (Cons 4 (Cons 5 (Cons 1 Nil)))))) (Cons 1 (Cons 2 (Cons 3 (Cons 4 (Cons 2 (Cons (-2) Nil)))))),
         Cons 0 (Cons 0 (Cons 0 (Cons 0 (Cons 3 (Cons 3 Nil))))))

    let test2 () : bool =
        list_eq (compare (Cons 0 (Cons 5 (Cons 0 (Cons 0 (Cons 0 (Cons 4 Nil)))))) 
                         (Cons 4 (Cons 1 (Cons 1 (Cons 0 (Cons 0 (Cons (-2) Nil))))))) 
                (Cons 4 (Cons 4 (Cons 1 (Cons 0 (Cons 0 (Cons 6 Nil))))))

    let test2_output () : (list int, list int, list int, list int) =
        (Cons 0 (Cons 5 (Cons 0 (Cons 0 (Cons 0 (Cons 4 Nil))))),
         Cons 4 (Cons 1 (Cons 1 (Cons 0 (Cons 0 (Cons (-2) Nil))))),
         compare (Cons 0 (Cons 5 (Cons 0 (Cons 0 (Cons 0 (Cons 4 Nil)))))) (Cons 4 (Cons 1 (Cons 1 (Cons 0 (Cons 0 (Cons (-2) Nil)))))),
         Cons 4 (Cons 4 (Cons 1 (Cons 0 (Cons 0 (Cons 6 Nil))))))

    let test3 () : bool =
        list_eq (compare (Cons 3 (Cons 3 (Cons 3 Nil))) 
                         (Cons 3 (Cons 3 (Cons 3 Nil)))) 
                (Cons 0 (Cons 0 (Cons 0 Nil)))

    let test3_output () : (list int, list int, list int, list int) =
        (Cons 3 (Cons 3 (Cons 3 Nil)),
         Cons 3 (Cons 3 (Cons 3 Nil)),
         compare (Cons 3 (Cons 3 (Cons 3 Nil))) (Cons 3 (Cons 3 (Cons 3 Nil))),
         Cons 0 (Cons 0 (Cons 0 Nil)))

    let test4 () : bool =
        list_eq (compare (Cons 10 (Cons (-5) (Cons 8 Nil))) 
                         (Cons 5 (Cons 5 (Cons 12 Nil)))) 
                (Cons 5 (Cons 10 (Cons 4 Nil)))

    let test4_output () : (list int, list int, list int, list int) =
        (Cons 10 (Cons (-5) (Cons 8 Nil)),
         Cons 5 (Cons 5 (Cons 12 Nil)),
         compare (Cons 10 (Cons (-5) (Cons 8 Nil))) (Cons 5 (Cons 5 (Cons 12 Nil))),
         Cons 5 (Cons 10 (Cons 4 Nil)))

    let test5 () : bool =
        list_eq (compare (Cons (-1) (Cons (-2) (Cons (-3) Nil))) 
                         (Cons (-1) (Cons (-2) (Cons (-3) Nil)))) 
                (Cons 0 (Cons 0 (Cons 0 Nil)))

    let test5_output () : (list int, list int, list int, list int) =
        (Cons (-1) (Cons (-2) (Cons (-3) Nil)),
         Cons (-1) (Cons (-2) (Cons (-3) Nil)),
         compare (Cons (-1) (Cons (-2) (Cons (-3) Nil))) (Cons (-1) (Cons (-2) (Cons (-3) Nil))),
         Cons 0 (Cons 0 (Cons 0 Nil)))

    let test6 () : bool =
        list_eq (compare (Cons 0 Nil) 
                         (Cons 0 Nil)) 
                (Cons 0 Nil)

    let test6_output () : (list int, list int, list int, list int) =
        (Cons 0 Nil,
         Cons 0 Nil,
         compare (Cons 0 Nil) (Cons 0 Nil),
         Cons 0 Nil)

    let test7 () : bool =
        list_eq (compare (Cons 0 (Cons 0 (Cons 0 Nil))) 
                         (Cons 1 (Cons 1 (Cons 1 Nil)))) 
                (Cons 1 (Cons 1 (Cons 1 Nil)))

    let test7_output () : (list int, list int, list int, list int) =
        (Cons 0 (Cons 0 (Cons 0 Nil)),
         Cons 1 (Cons 1 (Cons 1 Nil)),
         compare (Cons 0 (Cons 0 (Cons 0 Nil))) (Cons 1 (Cons 1 (Cons 1 Nil))),
         Cons 1 (Cons 1 (Cons 1 Nil)))

    let test8 () : bool =
        list_eq (compare (Cons 7 (Cons 2 (Cons (-3) Nil))) 
                         (Cons 3 (Cons 2 (Cons (-8) Nil)))) 
                (Cons 4 (Cons 0 (Cons 5 Nil)))

    let test8_output () : (list int, list int, list int, list int) =
        (Cons 7 (Cons 2 (Cons (-3) Nil)),
         Cons 3 (Cons 2 (Cons (-8) Nil)),
         compare (Cons 7 (Cons 2 (Cons (-3) Nil))) (Cons 3 (Cons 2 (Cons (-8) Nil))),
         Cons 4 (Cons 0 (Cons 5 Nil)))

    let test9 () : bool =
        list_eq (compare (Cons 100 (Cons 50 (Cons (-100) Nil))) 
                         (Cons 0 (Cons 50 (Cons 0 Nil)))) 
                (Cons 100 (Cons 0 (Cons 100 Nil)))

    let test9_output () : (list int, list int, list int, list int) =
        (Cons 100 (Cons 50 (Cons (-100) Nil)),
         Cons 0 (Cons 50 (Cons 0 Nil)),
         compare (Cons 100 (Cons 50 (Cons (-100) Nil))) (Cons 0 (Cons 50 (Cons 0 Nil))),
         Cons 100 (Cons 0 (Cons 100 Nil)))

    let test10 () : bool =
        list_eq (compare (Cons 1 (Cons 1 (Cons 1 (Cons 1 Nil)))) 
                         (Cons 2 (Cons 2 (Cons 2 (Cons 2 Nil))))) 
                (Cons 1 (Cons 1 (Cons 1 (Cons 1 Nil))))

    let test10_output () : (list int, list int, list int, list int) =
        (Cons 1 (Cons 1 (Cons 1 (Cons 1 Nil))),
         Cons 2 (Cons 2 (Cons 2 (Cons 2 Nil))),
         compare (Cons 1 (Cons 1 (Cons 1 (Cons 1 Nil)))) (Cons 2 (Cons 2 (Cons 2 (Cons 2 Nil)))),
         Cons 1 (Cons 1 (Cons 1 (Cons 1 Nil))))

    let testall () : bool = 
        test1() && test2() && test3() && test4() && test5() && test6() && test7() && test8() && test9() && test10()

    let testfail () : list int =
        let ref res = Nil in 
        if not test1() then res <- Cons 1 res;
        if not test2() then res <- Cons 2 res;
        if not test3() then res <- Cons 3 res;
        if not test4() then res <- Cons 4 res;
        if not test5() then res <- Cons 5 res;
        if not test6() then res <- Cons 6 res;
        if not test7() then res <- Cons 7 res;
        if not test8() then res <- Cons 8 res;
        if not test9() then res <- Cons 9 res;
        if not test10() then res <- Cons 10 res;
        res

    let runtest (x : int) : (list int, list int, list int, list int) =
        let ref res = (Nil, Nil, Nil, Nil) in
        if x = 1 then res <- test1_output();
        if x = 2 then res <- test2_output();
        if x = 3 then res <- test3_output();
        if x = 4 then res <- test4_output();
        if x = 5 then res <- test5_output();
        if x = 6 then res <- test6_output();
        if x = 7 then res <- test7_output();
        if x = 8 then res <- test8_output();
        if x = 9 then res <- test9_output();
        if x = 10 then res <- test10_output();
        res
    
    let rec failoutput (l : list int) : list (list int, list int, list int, list int) =
        match l with
        | Nil -> Nil
        | Cons x xs -> Cons (runtest x) (failoutput xs)
        end
    
    let test() : list (list int, list int, list int, list int) =
        let l = testfail () in
        failoutput l

end