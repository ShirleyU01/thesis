(*
def is_prime(n):
    """Return true if a given number is prime, and false otherwise.
    >>> is_prime(6)
    False
    >>> is_prime(101)
    True
    >>> is_prime(11)
    True
    >>> is_prime(13441)
    True
    >>> is_prime(61)
    True
    >>> is_prime(4)
    False
    >>> is_prime(1)
    False
    """
 *)


module HumanEval031Goal

    use int.Int
    use int.EuclideanDivision
    
    let is_prime (n : int) : bool =
        ensures { result <-> (n >= 2 /\ forall d: int. 2 <= d /\ d < n -> not (mod n d = 0)) }
        if n <= 2 then false
        else
            let ref flag = true in
            for i = 2 to n - 1 do
                if mod n i = 0 
                then flag <- false
            done ;
            flag
end

(* INSERT_CHATGPT_CODE *)

module HumanEval031
  let rec is_prime (n: int) : bool =
    if n <= 1 then false
    else if n = 2 then true
    else let rec check (d: int) : bool =
      if d * d > n then true
      else if is_prime d && n mod d = 0 then false
      else check (d + 1)
    in check 2
end


module TestHumanEval031
    use int.Int
    use list.List
    use HumanEval031

    let test1 () : bool =
        not is_prime 6

    let test1_output () : (int, bool, bool) =
        (6, is_prime 6, false)

    let test2 () : bool =
        is_prime 101

    let test2_output () : (int, bool, bool) =
        (101, is_prime 101, true)

    let test3 () : bool =
        is_prime 11

    let test3_output () : (int, bool, bool) =
        (11, is_prime 11, true)

    let test4 () : bool =
        is_prime 13441

    let test4_output () : (int, bool, bool) =
        (13441, is_prime 13441, true)

    let test5 () : bool =
        is_prime 61

    let test5_output () : (int, bool, bool) =
        (61, is_prime 61, true)

    let test6 () : bool =
        not is_prime 4

    let test6_output () : (int, bool, bool) =
        (4, is_prime 4, false)

    let test7 () : bool =
        not is_prime 1

    let test7_output () : (int, bool, bool) =
        (1, is_prime 1, false)

    let testall () : bool =
        test1() && test2() && test3() && test4() && test5() && test6() && test7()

    let testfail () : list int =
        let ref res = Nil in 
        if not test1() then res <- Cons 1 res;
        if not test2() then res <- Cons 2 res;
        if not test3() then res <- Cons 3 res;
        if not test4() then res <- Cons 4 res;
        if not test5() then res <- Cons 5 res;
        if not test6() then res <- Cons 6 res;
        if not test7() then res <- Cons 7 res;
        res

    let runtest (x : int) : (int, bool, bool) =
        let ref res = (0, false, false) in
        if x = 1 then res <- test1_output();
        if x = 2 then res <- test2_output();
        if x = 3 then res <- test3_output();
        if x = 4 then res <- test4_output();
        if x = 5 then res <- test5_output();
        if x = 6 then res <- test6_output();
        if x = 7 then res <- test7_output();
        res

    let rec failoutput (l : list int) : list (int, bool, bool) =
        match l with
        | Nil -> Nil
        | Cons x xs -> Cons (runtest x) (failoutput xs)
        end

    let test () : list (int, bool, bool) =
        let l = testfail () in
        failoutput l

end
