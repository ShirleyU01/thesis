module HumanEval003
  use list.List
  use int.Int
  use list.Length
  use list.Prefix
  use list.Sum

  predicate ever_below_zero (init : int) (ops : list int) =
    exists k:int. 0 <= k <= length ops /\ init + sum (prefix k ops) < 0  

  let rec helper (l: list int) (bal: int) : bool
    requires { true }
    ensures { result <-> ever_below_zero bal l }
    variant { length l }
  =
    match l with
    | Nil -> false
    | Cons x xs ->
      let bal2 = bal + x in
      if bal2 < 0 then true else helper xs bal2
    end

  let below_zero (operations: list int) : bool =
    ensures { result <-> ever_below_zero 0 operations }
    helper operations 0
end
