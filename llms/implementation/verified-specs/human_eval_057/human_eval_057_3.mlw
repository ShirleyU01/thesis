
module HumanEval057
  use int.Int
  use list.List
  use list.Length
  use list.NthNoOpt

  let rec check_dir (l: list int) (dir: int) : bool =
    match l with
    | Nil -> true
    | Cons _ Nil -> true
    | Cons x (Cons y r) ->
      if dir = 0 then
        if x < y then check_dir (Cons y r) 1
        else if x > y then check_dir (Cons y r) (-1)
        else check_dir (Cons y r) 0
      else if dir = 1 then
        if x <= y then check_dir (Cons y r) 1 else false
      else
        if x >= y then check_dir (Cons y r) (-1) else false
    end

  let monotonic (l: list int) : bool =
    ensures { result <-> ((forall i. 0 <= i < length l - 1 -> (nth i l < nth (i + 1) l)) 
                                \/ (forall i. 0 <= i < length l - 1 -> (nth i l > nth (i + 1) l))) }
    check_dir l 0
end


