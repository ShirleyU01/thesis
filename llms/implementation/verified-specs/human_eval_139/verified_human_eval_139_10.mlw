module HumanEval139
  use int.Int
  use int.Fact

  predicate spec_fact (n : int) (a : int)
    axiom spec_fact_base :
      forall a. spec_fact 1 a <-> a = 1
    axiom spec_fact_ind :
      forall a n. spec_fact n a <-> exists b. spec_fact (n - 1) b /\ a = b * fact n

  (* Pure ghost function to compute product of fact(k) from k=1 to k=n *)
  let rec function product_fact (n: int) : int
    requires { n >= 0 }
    variant { n }
  = if n <= 1 then 1 else fact n * product_fact (n - 1)

  let special_factorial (n: int) : int
    ensures { spec_fact n result }
  =
    let ref res = 1 in
    for i = 1 to n do
      invariant { 1 <= i <= n + 1 }
      invariant { res = product_fact (i - 1) }
      res <- res * fact i
    done;
    res
end
