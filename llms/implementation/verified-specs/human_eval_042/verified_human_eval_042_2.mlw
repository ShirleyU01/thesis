module HumanEval042
  use int.Int
  use list.List
  use list.Length
  use list.NthNoOpt
  use list.Append
  use list.Mem

  let rec nth_my (n : int) (l : list int) : int =
    requires { length l > 0 }
    requires { 0 <= n /\ n < length l }
    ensures  { nth n l = result }
    ensures  { mem result l }
    variant { n }
    match l with 
    | Cons x r -> if n = 0 then x else nth_my (n - 1) r
    end 
  
  let incr_list (l: list int) : list int =
    ensures { forall i. 0 <= i < length l -> (nth i l) + 1 = (nth i result) }
    ensures { length result = length l }
    let n = length l in
    let ref acc = Nil in
    (* acc will hold the incremented suffix [nth (i+1) l + 1; ... nth (n-1) l + 1] *)
    for i = n - 1 downto 0 do
      invariant { 0 <= i+1 <= n }
      invariant { length acc = n - (i+1) }
      invariant { forall j. 0 <= j < length acc -> nth j acc = nth (j + i + 1) l + 1 }
      acc <- Cons (nth_my i l + 1) acc
    done ;
    acc
end
