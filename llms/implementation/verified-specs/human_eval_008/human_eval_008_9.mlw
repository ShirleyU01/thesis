
module HumanEval008
  use int.Int
  use list.List
  use list.Length
  use list.NthNoOpt
  use list.Sum

  predicate product (l : list int) (q : int)
    axiom product_base: forall l'. length l' = 0 <-> product l' 1
    axiom product_rec : forall x', l', q'. product (Cons x' l') (q'*x') <-> product l' (q')

  let rec mysumm (l: list int) : int =
    match l with
    | Nil -> 0
    | Cons x xs -> x + mysumm xs
    end

  let rec myprod (l: list int) : int =
    match l with
    | Nil -> 1
    | Cons x xs -> x * myprod xs
    end

  let sum_product (l: list int) : list int =
    ensures { nth 0 result = sum l }
    ensures { product l (nth 1 result) }
    let s = mysumm l in
    let p = myprod l in
    Cons s (Cons p Nil)
end


