module HumanEval030
  use int.Int
  use list.List
  use list.Length
  use list.NthNoOpt
  use list.Mem

  let rec nth_my (n : int) (l : list int) : int =
    requires { length l > 0 }
    requires { 0 <= n /\ n < length l }
    ensures  { nth n l = result }
    ensures  { mem result l }
    variant { n }
    match l with 
    | Cons x r -> if n = 0 then x else nth_my (n - 1) r
    end
  
  let get_positive (l : list int) : list int =
    ensures { length l >= length result }
    ensures { forall x . (mem x l /\ x > 0) -> mem x result }
    ensures { forall x . mem x result -> x > 0 }
    let n = length l in
    let ref res = Nil in
    for i = n - 1 downto 0 do
      invariant { 0 <= i+1 <= n }
      invariant { length res <= n - (i+1) }
      invariant { forall j:int. 0 <= j < n /\ nth j l > 0 /\ j > i -> mem (nth j l) res }
      invariant { forall x:int. mem x res -> x > 0 }
      let v = nth_my i l in
      if v > 0 then res <- Cons v res else res <- res
    done;
    res
end
