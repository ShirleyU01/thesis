module HumanEval060
  use int.Int
  use int.EuclideanDivision

  predicate sum (n : int) (a : int)
    axiom sum_zero :
      forall a. sum 0 a <-> a = 0
    axiom sum_ind :
      forall a n. sum n a <-> exists b. sum (n - 1) b /\ a = b + n
    
    lemma sum_closed_form:
  forall n a. sum n a <-> a = div (n * (n + 1)) 2


  let sum_to_n (n: int) : int
    ensures { sum n result }
  =
    let ref sum = 0 in
    let ref i = n in
    while i >= 1 do
      invariant { 0 <= i <= n }
      invariant { sum = div (n * (n + 1)) 2 - div (i * (i - 1)) 2 }
      variant { i }
      sum <- sum + i;
      i <- i - 1
    done;
    sum
end
