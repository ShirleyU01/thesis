module HumanEval060
  use int.Int

  predicate sum (n : int) (a : int)
    axiom sum_zero :
        forall a. sum 0 a <-> a = 0
    axiom sum_ind :
        forall a n . sum n a <-> exists b. sum (n-1) b /\ a = b + n 

  let sum_to_n (n: int) : int =
    ensures { sum n result }
    let ref curr_sum = 0 in
    (* The invariant expresses that after i-1 iterations, sum holds the sum of 1..(i-1). *)
    for i = 1 to n do
      invariant { 0 <= i <= n+1 /\ sum (i-1) curr_sum }
      curr_sum <- curr_sum + i
    done;
    curr_sum
end
