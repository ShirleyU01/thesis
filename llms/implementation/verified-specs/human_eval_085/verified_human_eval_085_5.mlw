module HumanEval085
  use int.Int
  use int.EuclideanDivision
  use list.List

  function spec_add (l : list int) : int =
    match l with
    | Cons _ (Cons y ys) ->
        (if mod y 2 = 0 then y else 0) + spec_add ys
    | _ -> 0
    end  

  predicate even (x:int) = mod x 2 = 0
  predicate odd (x:int) = mod x 2 = 1

  function spec_add_acc (l: list int) (idx: int) : int =
    match l with
    | Nil -> 0
    | Cons x xs ->
        (if odd idx && even x then x else 0) + spec_add_acc xs (idx + 1)
    end

  lemma spec_add_equiv: forall l: list int. spec_add l = spec_add_acc l 0

  let rec add_acc (l : list int) (idx : int) (acc : int) : int
    requires { idx >= 0 }
    ensures {
      result = acc + spec_add_acc l idx
    }
    variant { l }
  =
    match l with
    | Nil -> acc
    | Cons x xs ->
        let acc' = if mod idx 2 = 1 && mod x 2 = 0 then acc + x else acc in
        add_acc xs (idx + 1) acc'
    end

  let add (l : list int) : int =
    ensures { result = spec_add l }
    add_acc l 0 0
end
