module HumanEval085
  use int.Int
  use int.EuclideanDivision
  use list.List

  function spec_add (l : list int) : int =
    match l with
    | Cons _ (Cons y ys) ->
        (if mod y 2 = 0 then y else 0) + spec_add ys
    | _ -> 0
    end

  (* Auxiliary specification for add_aux: computes the sum of even elements at odd indices, starting from idx *)
  function spec_add_aux (l: list int) (idx: int) : int =
    match l with
    | Nil -> 0
    | Cons x xs ->
        (if mod idx 2 = 1 && mod x 2 = 0 then x else 0) + spec_add_aux xs (idx + 1)
    end

  let rec add_aux (l : list int) (idx : int) : int
    variant { l }
    ensures { result = spec_add_aux l idx }
  =
    match l with
    | Nil -> 0
    | Cons x xs ->
        if mod idx 2 = 1 && mod x 2 = 0 then
          x + add_aux xs (idx + 1)
        else
          add_aux xs (idx + 1)
    end

  lemma spec_add_aux_spec:
    forall l: list int. spec_add l = spec_add_aux l 0

  let add (l : list int) : int
    ensures { result = spec_add l }
  =
    add_aux l 0
end
