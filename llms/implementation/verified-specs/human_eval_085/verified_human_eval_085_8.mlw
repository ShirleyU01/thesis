module HumanEval085
  use int.Int
  use int.EuclideanDivision
  use list.List
  use list.Quant

  function spec_add (l : list int) : int =
    match l with
    | Cons _ (Cons y ys) ->
        (if mod y 2 = 0 then y else 0) + spec_add ys
    | _ -> 0
    end  

  (* Helper function: computes spec_add starting at index i *)
  function spec_add_from (l: list int) (i: int) : int =
    match l with
    | Nil -> 0
    | Cons x xs ->
        if i = 1 then (if mod x 2 = 0 then x else 0) + spec_add_from xs 0
        else spec_add_from xs (i + 1)
    end

  (* Lemma: spec_add_from l 0 = spec_add l *)
  lemma spec_add_from_0: forall l: list int. spec_add_from l 0 = spec_add l

  let rec add_flag (l : list int) (odd : bool) : int
    variant { l }
    ensures {
      if odd then result = spec_add_from l 1 else result = spec_add_from l 0
    }
  =
    match l with
    | Nil -> 0
    | Cons x xs ->
        if odd then
          (if mod x 2 = 0 then x else 0) + add_flag xs (not odd)
        else
          add_flag xs (not odd)
    end

  let add (l : list int) : int =
    ensures { result = spec_add l }
    add_flag l false
end
