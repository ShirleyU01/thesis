module HumanEval057
  use int.Int
  use list.List
  use list.Length
  use list.NthNoOpt

  let rec non_decreasing (l: list int) : bool
    ensures { result <-> (forall i: int. 0 <= i < length l - 1 -> nth i l <= nth (i+1) l) }
    variant { l }
  = match l with
    | Nil -> true
    | Cons _ Nil -> true
    | Cons x (Cons y r) -> if x <= y then non_decreasing (Cons y r) else false
    end

  let rec non_increasing (l: list int) : bool
    ensures { result <-> (forall i: int. 0 <= i < length l - 1 -> nth i l >= nth (i+1) l) }
    variant { l }
  = match l with
    | Nil -> true
    | Cons _ Nil -> true
    | Cons x (Cons y r) -> if x >= y then non_increasing (Cons y r) else false
    end

  lemma non_decreasing_semantics:
    forall l: list int. non_decreasing l <-> (forall i: int. 0 <= i < length l - 1 -> nth i l <= nth (i+1) l)

  lemma non_increasing_semantics:
    forall l: list int. non_increasing l <-> (forall i: int. 0 <= i < length l - 1 -> nth i l >= nth (i+1) l)

  let monotonic (l: list int) : bool
      ensures { result <-> ((forall i. 0 <= i < length l - 1 -> (nth i l <= nth (i + 1) l)) 
                                \/ (forall i. 0 <= i < length l - 1 -> (nth i l >= nth (i + 1) l))) }
  =
    non_decreasing l || non_increasing l
end
