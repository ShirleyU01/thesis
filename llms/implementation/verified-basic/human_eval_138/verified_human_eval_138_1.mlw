module HumanEval138
  use int.Int
  use int.EuclideanDivision

  predicate is_sum_of_4_positive_even (n:int) =
    exists a b c d:int.
      a > 0 /\ mod a 2 = 0 /\
      b > 0 /\ mod b 2 = 0 /\
      c > 0 /\ mod c 2 = 0 /\
      d > 0 /\ mod d 2 = 0 /\
      n = a + b + c + d

  lemma sum_of_4_positive_even_characterization:
    forall n:int. is_sum_of_4_positive_even(n) <-> (n >= 8 /\ mod n 2 = 0)
    proof
      (* 
         (=>) direction: If n is sum of 4 positive even numbers, each >=2, so n >= 8, sum even.
         (<=) direction: If n >= 8 and even, n = 2 + 2 + 2 + (n - 6), with n-6 >= 2 and even.
      *)
      left: 
        assume { is_sum_of_4_positive_even(n) }
        then have { exists a b c d:int. a>0 /\ even(a) /\ b>0 /\ even(b) /\ c>0 /\ even(c) /\ d>0 /\ even(d) /\ n = a+b+c+d }
        then have { a>=2 /\ b>=2 /\ c>=2 /\ d>=2 } by arithmetic
        then have { n = a+b+c+d >= 8 }
        also all even so n even.
        thus { n >= 8 /\ mod n 2 = 0 }
      right:
        assume { n >= 8 /\ mod n 2 = 0 }
        then n-6 >= 2 /\ even(n-6)
        let a=2, b=2, c=2, d=n-6 in
        have { a>0 /\ even(a) /\ b>0 /\ even(b) /\ c>0 /\ even(c) /\ d>0 /\ even(d) /\ n = a+b+c+d }
        thus { is_sum_of_4_positive_even(n) }
      qed

  let is_equal_to_sum_even (n: int) : bool =
    ensures { result <-> (mod n 2 = 0) /\ (n >= 8) }
    if n >= 8 && mod n 2 = 0 then true else false
end
