module HumanEval031
  use int.Int
  use int.EuclideanDivision

  let is_prime (n: int) : bool =
    ensures { result <-> (n >= 2 /\ forall d: int. 2 <= d /\ d < n -> not (mod n d = 0)) }
    let ref found = false in
    let ref d = n - 1 in
    while d >= 2 && not found do
      invariant { 1 <= d + 1 <= n /\
        (* found is true iff there exists k in [d+1, n-1] such that mod n k = 0 *)
        (found <-> (exists k: int. d + 1 <= k < n /\ mod n k = 0)) /\
        (* for all k in [d+1, n-1], if mod n k = 0, then found *)
        (forall k: int. d + 1 <= k < n -> (mod n k = 0 -> found))
      }
      variant { d }
      if mod n d = 0 then found <- true;
      d <- d - 1
    done;
    not found
end
