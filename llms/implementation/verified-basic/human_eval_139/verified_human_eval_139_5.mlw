module HumanEval139
  use int.Int
  use int.Fact
  use list.List
  use list.Length

  predicate spec_fact (n : int) (a : int)
    axiom spec_fact_base :
      forall a. spec_fact 1 a <-> a = 1
    axiom spec_fact_ind :
      forall a n . spec_fact n a <-> exists b. spec_fact (n-1) b /\ a = b * fact n

  (* build_list creates the list [a, a+1, ..., b] when a <= b; [] otherwise *)
  let rec build_list (a: int) (b: int) : list int
    requires { a >= 1 }
    requires { b >= 0 }
    variant { if a > b then 0 else b - a + 1 }
    ensures { result = Nil <-> a > b }
    ensures { a > b -> result = Nil }
    ensures { a <= b -> length result = b - a + 1 }
    ensures { forall i:int. 0 <= i < length result -> nth result i = a + i }
  = if a > b then Nil else Cons a (build_list (a+1) b)

  (* product computes the product of list elements; product Nil = 1 *)
  let rec product (l: list int) : int
    variant { length l }
    ensures { (l = Nil -> result = 1) }
    ensures { (exists x xs. l = Cons x xs) -> result = nth l 0 * product (tl l) }
  = match l with | Nil -> 1 | Cons x xs -> x * product xs end

  (* map_fact applies fact to each element of the list *)
  let rec map_fact (l: list int) : list int
    variant { length l }
    ensures { length result = length l }
    ensures { forall i:int. 0 <= i < length l -> nth result i = fact (nth l i) }
  = match l with | Nil -> Nil | Cons x xs -> Cons (fact x) (map_fact xs) end

  (* Lemma: product (map_fact (build_list 1 n)) computes n! * (n-1)! * ... * 1! for n >= 1 *)
  lemma product_of_map_fact_build_list :
    forall n:int. n >= 1 ->
    product (map_fact (build_list 1 n)) =
      if n = 1 then 1 else product (map_fact (build_list 1 (n-1))) * fact n

  (* Lemma: product (map_fact (build_list 1 n)) realizes spec_fact *)
  lemma product_map_fact_spec_fact :
    forall n:int. n >= 1 -> spec_fact n (product (map_fact (build_list 1 n)))

  let special_factorial (n: int) : int
    requires { n >= 1 }
    ensures { spec_fact n result }
  = let l = build_list 1 n in
    product (map_fact l)
end
