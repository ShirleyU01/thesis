module HumanEval003
  use list.List
  use int.Int
  use list.Length
  use list.Prefix
  use list.Sum

  predicate ever_below_zero (init : int) (ops : list int) =
    exists k:int. 0 <= k <= length ops /\ init + sum (prefix k ops) < 0

  (* Lemma: below_zero_rec xs bal returns true iff ever_below_zero bal xs *)
  lemma below_zero_rec_correct: forall bal ops. below_zero_rec ops bal = true <-> ever_below_zero bal ops

  let rec below_zero_rec (ops: list int) (bal: int) : bool
    variant { length ops }
    ensures { result <-> ever_below_zero bal ops }
  =
    match ops with
    | Nil -> false
    | Cons x xs ->
      let bal' = bal + x in
      if bal' < 0 then true else below_zero_rec xs bal'
    end

  let below_zero (operations: list int) : bool =
    ensures { result <-> ever_below_zero 0 operations }
    below_zero_rec operations 0
end
