module HumanEval060
  use int.Int

  predicate sum (n : int) (a : int)
    axiom sum_zero :
        forall a. sum 0 a <-> a = 0
    axiom sum_ind :
        forall a n . sum n a <-> exists b. sum (n-1) b /\ a = b + n     

  let sum_to_n (n: int) : int =
    ensures { sum n result }
    let ref sum = 0 in
    let ref i = n in
    while i >= 1 do
      invariant { 0 <= i <= n /\ exists s. sum i s /\ sum = (result if i = 0 else (let rec sum_aux j = if j = n then 0 else sum_aux (j+1) + (j+1) in sum_aux (n-i))) }
      invariant { exists s. sum i s /\ sum = (let rec f j acc = if j < i then acc else f (j-1) (acc + j) in f n 0) }
      variant { i }
      sum <- sum + i;
      i <- i - 1
    done;
    sum
end
