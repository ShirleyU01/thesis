(* 
def longest(strings: List[str]) -> Optional[str]:
    """ Out of list of strings, return the longest one. Return the first one in case of multiple
    strings of the same length. Return None in case the input list is empty.
    >>> longest([])

    >>> longest(['a', 'b', 'c'])
    'a'
    >>> longest(['a', 'bb', 'ccc'])
    'ccc'
    """
 *)

module HumanEval012Goal
    use list.List
    use option.Option
    use int.Int
    use string.String
    use string.Char
    use ocaml.OCaml


    let rec strlen_aux (s: string) (i: int) : int
        variant { length s - i }
        requires { 0 <= i <= length s }
        ensures { result = length s - i }
    =
        if i >= length s then 0
        else 1 + strlen_aux s (i + 1)

    let strlen (s: string) : int
        ensures { result = length s }
    = strlen_aux s 0

    let rec longest (l: list string) : option string =
    match l with
    | Nil -> None
    | Cons x xs ->
        let rec aux (best: string) (rest: list string) : string =
            match rest with
            | Nil -> best
            | Cons y ys ->
                if strlen y > strlen best then aux y ys else aux best ys
            end
        in Some (aux x xs)
    end
end
