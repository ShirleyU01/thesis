(*
def mean_absolute_deviation(numbers: List[float]) -> float:
    """ For a given list of input numbers, calculate Mean Absolute Deviation
    around the mean of this dataset.
    Mean Absolute Deviation is the average absolute difference between each
    element and a centerpoint (mean in this case):
    MAD = average | x - x_mean |
    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])
    1.0
    """
*)

module HumanEval004Goal

    use real.Real
    use list.List
    use list.Length
    use list.Map
    use real.RealInfix
    use real.FromInt
    use real.Abs

    let rec sum (l : list real) : real =
        match l with
        | Nil -> 0.0
        | Cons x xs -> x + sum xs
        end
    
    let rec len_real (l : list real) : real =
        match l with
        | Nil -> 0.0
        | Cons x xs -> 1.0 + len_real xs
        end

    let mean (l: list real) : real =
        let s = sum l in 
        let len = len_real l in 
        if s = 0.0 
        then 0.0 
        else (s /. len)

    let abs_diff_from_mean (m: real) (x: real) : real =
        if x >. m 
        then x -. m
        else m -. x

    let mean_absolute_deviation (l: list real) : real =
        let m = mean l in
        if len_real l = 0.0
        then 0.0 
        else (sum (map (abs_diff_from_mean m) l) / (len_real l))


(* INSERT_CHATGPT_CODE *)


module TestHumanEval000

    use real.Real
    use list.List
    use list.Length
    use list.Map
    use real.RealInfix

    let test1 () : bool =
        abs (mean_absolute_deviation (Cons 1.0 (Cons 2.0 (Cons 3.0 (Cons 4.0 Nil)))) -. 1.0) < 1e-6

    let test2 () : bool =
        abs (mean_absolute_deviation (Cons 5.0 (Cons 5.0 (Cons 5.0 (Cons 5.0 Nil)))) -. 0.0) < 1e-6

    let test3 () : bool =
        abs (mean_absolute_deviation (Cons 2.0 (Cons 4.0 (Cons 6.0 Nil))) -. 2.0) < 1e-6

    let test4 () : bool =
        abs (mean_absolute_deviation (Cons 10.0 (Cons 0.0 Nil)) -. 5.0) < 1e-6

    let test5 () : bool =
        abs (mean_absolute_deviation Nil) < 1e-6

    let testfail() : list int =
        let ref res = Nil in
        if not test1() then res <- Cons 1 res;
        if not test2() then res <- Cons 2 res;
        if not test3() then res <- Cons 3 res;
        if not test4() then res <- Cons 4 res;
        if not test5() then res <- Cons 5 res;
        res

    let test () = let l = testfail () in failoutput l

    let testall () : bool =
        test1() && test2() && test3() && test4() && test5()

end
