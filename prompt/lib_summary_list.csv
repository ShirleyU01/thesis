Function,Module,Type,Description,Import Statement
is_nil,List,list 'a -> bool,Checks if a list is empty (Nil).,use list.List
length,Length,list 'a -> int,Computes the length of a list.,use list.Length
mem,Mem,a -> list 'a -> bool,Checks if an element is in the list.,use list.Mem
mem,Quant,('a -> 'a -> bool) -> 'a -> list 'a -> bool,"Checks if an element, based on a custom equality, is in the list.",use list.Quant
for_all,Quant,('a -> bool) -> list 'a -> bool,Returns true if all elements satisfy a predicate.,use list.Quant
for_some,Quant,('a -> bool) -> list 'a -> bool,Returns true if any element satisfies a predicate.,use list.Quant
elements,Elements,list 'a -> fset 'a,Returns a set of all elements in the list.,use list.Elements
nth,Nth,int -> list 'a -> option 'a,"Retrieves the nth element, returns None if out of bounds.",use list.Nth
hd,HdTl,list 'a -> option 'a,"Gets the first element, returns None if empty.",use list.HdTl
tl,HdTl,list 'a -> option (list 'a),"Returns the tail of the list, returns None if empty.",use list.HdTl
++,Append,list 'a -> list 'a -> list 'a,Concatenates two lists.,use list.Append
reverse,Reverse,list 'a -> list 'a,Reverses the order of elements in a list.,use list.Reverse
rev_append,RevAppend,list 'a -> list 'a -> list 'a,Efficiently reverses the first list and appends to the second.,use list.RevAppend
combine,Combine,"list 'a -> list 'b -> list ('a, 'b)",Zips two lists into a list of pairs.,use list.Combine
permut,Permut,list 'a -> list 'a -> bool,Checks if two lists are permutations of each other.,use list.Permut
prefix,Prefix,int -> list 'a -> list 'a,Returns the first n elements of a list.,use list.Prefix
sum,Sum,list int -> int,Sums all integer elements in the list.,use list.Sum