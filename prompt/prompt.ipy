# # prompt for ideas
# def idea(description: str) -> str:
#     prompt_functionality_brainstorming = f"""
#     According to the following description `{description}`, generate 5 different ways that 
#     a developer might commonly implement using why3. For instance, consider loops, recursions, pattern matching, 
#     and different branching conditions. Describe the high-level behavior and expected outcomes and how you would like to 
#     implement them. 
# """
#     return prompt_functionality_brainstorming

# prompt for ideas with examples
example_file = open('/Users/weiranyu/Desktop/15414/thesis/LLM/prompt/example.txt', 'r') 
example = example_file.read()

def idea(description : str, example : str) -> str:
    prompt_functionality_brainstorming = f"""
    Given a description of problem, it is possible to implement it in different ways. For instance, consider loops, recursions, 
    pattern matching, and different branching conditions. Here is an example of 5 different algorithms for one example description:
    `{example}`
    According to the following description `{description}`, please generate 5 different ways that a developer might implement 
    using why3. Try to make sure that the ways of implementation is as diverse as possible. Describe the high-level behavior 
    and expected outcomes and how you would like to implement them. 
"""
    return prompt_functionality_brainstorming

# # prompt for implementation
# def implement() -> str:
#     prompt_implementation = f"""
#     Implement the functionality described above using why3. Ensure that the implementation
#     is syntax-error free, clear, and easy to test. The implementation should focus on 
#     achieving the high-level behavior described, while not implementating specification."""
#     return prompt_implementation

# prompt for implementation with examples of library usage
def implement() -> str:
    prompt_implementation = f"""
    Implement the functionality described above using why3. Ensure that the implementation
    is syntax-error free, clear, and easy to test. Pay attention to correct library usage. For instance,
    if the implementation uses function length from list module, please include it correctly as `use list.Length`. 
    Remove unnecessary comments and don't implement specification. The implementation should focus on 
    achieving the high-level behavior described.
"""
    return prompt_implementation

