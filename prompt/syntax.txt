(1) If you want to use pattern matching, keep in mind that you need to write in a correct syntax. Here is an example:
        match l with 
            | Nil -> true
            | Cons x xs -> if x < acc then false else helper xs x
        end
    Notice that there must be an "end" statement when the pattern matching ends

(2) If you want to use `begin` statement, keep in mind that you need to write in a correct syntax. Here is an example:
        begin
            if n < 8 
            then false
            else true
        end
    Notice that there must be an "end" statement 

(3) If you want to generate a list, keep in mind that list is defined as follows:
        type list 'a = Nil | Cons 'a (list 'a)
    Notice that it is ILLEGAL to define a list using []

(4) If you want to use `nth` function to iterate through a list, keep in mind that `nth` function given in why3 list.NthNoOpt
    library cannot be used in a non-ghost context. I recommand you to instead define your own `nth_my` function as follows:
        let rec nth_my (n : int) (l : list int) : int =
            requires { length l > 0 }
            requires { 0 <= n /\ n < length l }
            variant { n }
            ensures { nth n l = result }
            match l with 
            | Cons x r -> if n = 0 then x else nth_1 (n - 1) r
            end 
    and then replace all 'nth' usage with 'nth_my'.
    Notice that to define `nth_my`, you will need to include corresponding why3 library as follows:
        use list.List
        use list.Length
        use list.NthNoOpt

(5) For reference, here are the boolean operations that you should use inside function definition:
    && --> and 
    not --> not
    || --> or

(6) fold_left and fold_right cannot be used in a non-ghost context, i.e. it cannot be used in the implementation of programs

(7) The most common use of mod is the one in the Euclidean Division module that you can import using:
	use int.EuclideanDivision

Note that mod takes as input two integers and returns an integer. For instance:
	mod a b

Use this syntax if you want to use mod in your programs.

(8) The most common use of division is with the operator div in the Euclidean Division module that you can import using:
	use int.EuclideanDivision

Note that div takes as input two integers and returns an integer. For instance:
	div a b

Use this syntax if you want to use div in your programs.

(9) Minimum and Maximum functions can be used by importing the following module:
	use int.MinMax

Note that min and max are functions that take as input two integers and returns an integer. For instance:
	min a b
	max a b

Use this syntax if you want to use min or max in your programs.

(10) If you need to use any arithmetic operator such as =, -, +, *, <, >, >= or <= you will need to import the following module:
    use int.Int

(11) There is no / operator. Never use / in your programs. If you want to use division, use div instead.

(12) There is no append function. If you want to append two lists you can use the ++ operator. You will need to import the following module:
    use list.Append

Note that ++ should be used as follows:
    let c = a ++ b
Where a and b are lists

If you want to append an element to a list you must use the function Cons instead.

