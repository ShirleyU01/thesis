(*
### PROMPT
def below_zero(operations: list int) : bool:
    """ You're given a list of deposit and withdrawal operations on a bank account that starts with
    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    at that point function should return True. Otherwise it should return False.
    >>> below_zero([1, 2, 3])
    False
    >>> below_zero([1, 2, -4, 5])
    True
    """
*)

(*
(* original *)
module BelowZero

  use int.Int  // Import the integer module for integer operations    (* syntax error *)
  (* syntax error -> without use list.List*)

  (* Define the function below_zero which takes a list of integers representing transactions *)
  let rec below_zero (transactions: list int) (balance: int) : bool =
    match transactions with
    | Nil -> false  (* No transactions left, return False since balance never went below zero *)
    | Cons x xs ->
        let new_balance = balance + x in
        if new_balance < 0 then
          true  (* Return True immediately if balance is negative *)
        else
          below_zero xs new_balance  (* Otherwise, continue with the next transaction *)
    end

  (* Entry point function that initializes balance to 0 *)
  let check_below_zero (transactions: list int) : bool =
    below_zero transactions 0  (* Start with initial balance of 0 *)

end
*)

(* updated prompt *)
module BelowZero

  use int.Int
  use list.List

  let rec below_zero (transactions: list int) (balance: int) : (int, bool) =
    match transactions with
    | Nil -> (balance, false)
    | Cons x xs ->
        let new_balance = balance + x in
        if new_balance < 0 then
          (new_balance, true)
        else
          below_zero xs new_balance
    end

  let check_below_zero (transactions: list int) : (int, bool) =
    below_zero transactions 0

end


