(*
def monotonic(l: list):
    """Return True is list elements are monotonically increasing or decreasing.
    >>> monotonic([1, 2, 4, 20])
    True
    >>> monotonic([1, 20, 4, 10])
    False
    >>> monotonic([4, 1, 0, -10])
    True
    """
 *)

module HumanEval057
    
    use int.Int
    use list.List
    use list.Length
    use list.NthNoOpt
    
      let rec nth_1 (n : int) (l : list int) : int =
        requires { length l > 0 }
        requires { 0 <= n /\ n < length l }
        variant { n }
        ensures { nth n l = result }
        match l with 
        | Cons x r -> if n = 0 then x else nth_1 (n - 1) r
        end 

    let rec helper (l : list int) (acc : int) : bool =
        match l with 
        | Nil -> true
        | Cons x xs -> if x < acc then false else helper xs x
        end

    let monotonic (l : list int) : bool =
        helper l (nth_1 0 l)
end