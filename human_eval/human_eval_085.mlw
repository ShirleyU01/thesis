(*
def add(lst):
    """Given a non-empty list of integers lst. add the even elements that are at odd indices..


    Examples:
        add([4, 2, 6, 7]) ==> 2
    """
*)

module HumanEval085
    
    use int.Int
    use list.List
    use list.NthNoOpt
    use int.EuclideanDivision
    use list.Length

    let rec nth_1 (n : int) (l : list int) : int =
        requires { length l > 0 }
        requires { 0 <= n /\ n < length l }
        variant { n }
        ensures { nth n l = result }
        match l with 
        | Cons x r -> if n = 0 then x else nth_1 (n - 1) r
        end 

    let add (l : list int) : int =
        let n = length l in 
        let ref res = 0 in 
        for i = 0 to n - 1 do 
            let elem = nth_1 i l in 
            if mod i 2 = 1 && mod elem 2 = 0 
            then res <- res + elem
        done ;
        res
end


module TestHumanEval085

    use int.Int
    use list.List
    use HumanEval085

    let test1 () : bool =
        add (Cons 4 (Cons 2 (Cons 6 (Cons 7 Nil)))) = 2

    let test2 () : bool =
        add (Cons 1 (Cons 3 (Cons 5 (Cons 7 (Cons 9 Nil))))) = 0

    let test3 () : bool =
        add (Cons 2 (Cons 4 (Cons 6 (Cons 8 (Cons 10 Nil))))) = 12

    let test4 () : bool =
        add (Cons (-2) (Cons 3 (Cons (-4) (Cons 6 Nil)))) = 6

    let test5 () : bool =
        add (Cons 1 (Cons 2 (Cons 3 (Cons 4 (Cons 5 (Cons 6 (Cons 7 (Cons 8 (Cons 9 (Cons 10 Nil)))))))))) = 30

    let test6 () : bool =
        add (Cons 10 (Cons 11 (Cons 12 (Cons 13 (Cons 14 (Cons 15 Nil)))))) = 0

    let test7 () : bool =
        add (Cons 0 (Cons 2 (Cons 0 (Cons 4 (Cons 0 (Cons 6 Nil)))))) = 12

    let test8 () : bool =
        add (Cons 7 (Cons (-2) (Cons 5 (Cons (-4) (Cons 8 (Cons 9 Nil)))))) = (-6)

    let test9 () : bool =
        add (Cons 100 (Cons 101 (Cons 102 (Cons 103 (Cons 104 Nil))))) = 0

    let test10 () : bool =
        add (Cons 1 (Cons 8 (Cons 2 (Cons 16 (Cons 3 (Cons 32 Nil)))))) = 56

    let testall () : bool = 
        test1() && test2() && test3() && test4() && test5() && test6() && test7() && test8() && test9() && test10()

end
